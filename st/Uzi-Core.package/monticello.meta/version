(name 'Uzi-Core-Richo.364' message 'Added source code intervals for the current pc in UziDebuggerResource>>#summary:' id '271ba8bd-18fa-a648-a8c3-df58b0776144' date '6 January 2019' time '4:12:40.110925 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.363' message 'Added a new #breakpoints endpoint to UziDebuggerResource.This allows the web editor to put user breakpoints.' id '1524e58c-ea53-104d-b123-146898777fd5' date '6 January 2019' time '2:41:12.562925 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.362' message 'Added #validBreakpoints to UziProgramResource>>#summary:' id 'd5d87130-db9c-ea41-a588-ec9a6cf2bd2b' date '6 January 2019' time '12:44:11.193925 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.361' message 'Added UziProgram>>#linesOfCode. It''s not really a good name for this method because it returns an association whose key is the line and whose value is the pc of the first instruction of this line (if any). I''ll use it to map lines of code and breakpoints in the editor debugger.' id 'b5774c38-ccf4-b549-b557-354d569096fd' date '6 January 2019' time '12:01:31.829925 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.360' message 'Added #isHalted field to UziDebuggerResource>>#summary:' id '1bbbfcfc-6d01-d242-ad46-eac26e9f1b3d' date '5 January 2019' time '11:52:55.227777 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.359' message 'Changed protocol to update the debugger before sending the continue message to the vm.This update will set the debugger state to nil so that it know it is no longer halted. Also, I added a few extra properties such as #isHalted and #protocol. And I changed the debugger''s update method to stop triggering the #debuggerUpdate event.' id '93a7c7e6-5b4d-e84d-95b7-a28bcdbb2186' date '2 January 2019' time '9:54:37.32992 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.358' message 'Implemented UziDebuggerResource, which exposes the debugger state to the web.' id 'f85e42a8-a312-f449-9578-4c37659693d5' date '2 January 2019' time '8:30:04.15892 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.357' message 'Changed UziProtocol to also trigger the #debuggerUpdate event.I will use this from the UziServer to trigger a client update.' id '40999406-10f7-e847-b9b5-eca675c899e5' date '2 January 2019' time '8:28:48.71192 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.356' message 'Small change in UziStackFrame>>#printStackOn:Now I use tabs to separate each data column.' id '599a5e81-3bd2-5d4a-be8f-07cdbab1efb1' date '2 January 2019' time '8:27:26.99092 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.355' message 'Added a few accessors to UziStackFrame' id '0c701995-06a2-2542-9b28-2f2e6755eb4b' date '2 January 2019' time '8:25:54.78892 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.354' message 'Added "step out" action to the debugger.' id 'b71cd409-05eb-454e-9b4e-e47047ab5f91' date '2 January 2019' time '8:24:52.90192 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.353' message 'Changed UziDebugger to rebuild its program on each access.Before, I was initializing the "program" inst var at creation time because I was assuming that the debugger instance was useful for a limited time. Now that I keep an instance alive during the entire lifecycle of the protocol I need to make it work even if the program changes. Of course, I will need to detect when the vm is halted to avoid calling debugging methods that are invalid for the vm state, but that''s a problem for the future.' id '158e90cc-11b7-6346-8232-b332252aebe6' date '2 January 2019' time '4:21:49.316085 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.352' message 'Changed UziProtocol and UziDebugger relationship.Before, I created UziDebugger instances whenever I needed because each debugger was associated with a running script. Now that all script halt when a breakpoint is hit it doesn''t make much sense. So I added a "debugger" instance to UziProtocol and instead of updating the state via events I can reference it directly.' id 'ff9b772f-eae0-7d4d-a886-5a5a454a8691' date '2 January 2019' time '4:18:21.248085 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.351' message 'Removed useless class.' id '9ca24892-a6df-f940-9cef-1ddcd9247525' date '2 January 2019' time '4:13:46.747085 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.350' message 'Changed stepping methods in UziDebuggerInstruction.Before, once an instruction was chosen the breakpoint was put only on its first inner instruction. Now it puts breakpoints in all of them. This fixes a bug when stepping over the "if" in the following program:	func t() { return 1; }	func f() { return 0; }	task test() running {		if t() && !f() {			toggle(D13);			delayMs(100);		}	}' id 'd50635ae-5485-8b42-b003-18b9911ad4fe' date '2 January 2019' time '11:21:47.26744 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.349' message 'Changed UziDebuggerInstruction>>#isTrivial.Now it returns false if one of the inner instructions is a script call. This definition is probably still wrong, though. I need to think this more but for now it''s good enough.' id 'e09d3aab-c185-9147-be1d-83817cb6e982' date '2 January 2019' time '11:18:56.69944 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.348' message 'Small refactoring of UziDebuggerProgram and related classes.Basically, I added the "inner" prefix to their inst vars that referenced the original objects. It was getting confusing to talk about the "program" not knowing if I mean the debugger''s view of the program or the actual program produced by the compiler.' id '14093d6a-0f3e-3d4c-aac5-2f06960654b2' date '2 January 2019' time '10:48:23.51744 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.347' message 'Changed UziDebugger to only have one program variable.The "program" inst var now holds a reference to a UziDebuggerProgram instance. So I had to make some changes to the UziDebuggerProgram to make it work like an UziProgram.' id '9aaca584-59e5-0e45-90b3-97c758318fe4' date '2 January 2019' time '10:34:36.78344 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.346' message 'Fixed bug in UziCallNode>>#hasSideEffects.This method is called from the compiler in order to avoid emitting code to perform short-circuit when there are no side effects. However, it was wrong because it was ignoring the arguments and only taking into account the primitive, which failed in cases like: 		!foo()	Here, the primitive is side-effect free but the argument is a script call and we don''t know if it''s safe so we must consider it has side effects.' id 'f72af043-4f22-0546-bdc9-5fc2eb66f9f9' date '2 January 2019' time '10:28:11.24444 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.345' message 'Cleaning up a bit after all the experiments.' id 'b131a953-3b69-2a41-a39d-c18d16eef532' date '2 January 2019' time '12:01:40.60149 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.344' message 'Added support for branches in the debugger.Also, fixed a few bugs. And now it ignores trivial instructions.' id '44d87dd4-aa53-be49-964a-966e95fbb917' date '1 January 2019' time '9:30:07.208337 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.343' message 'Updated UziDebugger. Step over/into mostly working.' id 'e3585155-4da4-fe40-86b1-dd15206133a6' date '1 January 2019' time '8:38:26.648337 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.342' message 'Made a few changes to UziDebuggerProgram and UziDebuggerScript.Mostly, I changed UziDebuggerScript so that it knows its program and added a few accessors.' id '1b3a9b47-a97d-8f44-a1b9-3fda1aefccd6' date '1 January 2019' time '8:35:10.682337 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.341' message 'Removed all the UziDebuggerInstruction subclasses.As it turns out, the classification was all wrong. Also, the code is simpler in one place.' id '60a465b1-5163-574a-9f32-4bba6b73774a' date '1 January 2019' time '8:32:46.900337 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.340' message 'Fixed bug that was considering script call instructions as statements.They are not statements. All calls leave the return value on the stack. If the value is discarded, then the compiler emits a pop after the call. So that is the actual statement for the call.I also changed the compiler so that the pop emitted will have the same node as the expression whose value it is discarding. This way the instruction is correctly highlighted.' id 'c11acd9a-8da3-9845-b12e-138f7bc7858b' date '1 January 2019' time '6:02:19.701337 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.339' message 'Starting to use the UziDebuggerProgram for the "step over"' id '7a95dc7d-0663-b746-848f-1cd8ab1e7a65' date '1 January 2019' time '5:32:51.046337 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.338' message 'Starting to build a program representation for the debugger.I think the current UziProgram class (and all related classes) is difficul to use for the debugger so I''m making a bunch of wrapper classes whose purpose is to work with the debugger.' id '21e698bf-e683-834f-b377-3bfb2acf9b2f' date '1 January 2019' time '3:02:18.237821 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.337' message 'Changed UziDebugger to use the instructions to choose the next breakpoints for each step.Instead of the AST which is more complicated to query ()and also I might not always have it available).' id '72879c71-c092-694a-986e-de7b536f7d71' date '1 January 2019' time '12:37:00.056613 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.336' message 'Removed unnecessary inst var from UziPrimitive.' id '803d113e-d1dd-3044-aa87-94d7c6e619f4' date '1 January 2019' time '12:34:36.646613 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.335' message 'Added a few methods to the UziInstruction hierarchy.The methods are #isStatement, #isBranch, #isReturn, and #isScriptCall. I''m planning to use these as ways of helping the debugger handle the different stepping modes for each instruction.' id 'f802c4db-ca5f-1a49-9744-692a857adbb7' date '1 January 2019' time '12:33:25.555613 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.334' message 'Changed UziDebugger to avoid sending so many messages.It''s a small improvement, though. Now instead of sending the breakpoints over to the protocol immediately it will store the final state locally and send them all at once when the user requires it (which is usually when they click one of the debugger buttons). This way we avoid unnecessary interactions.' id '9e985349-061f-1645-96c3-c6c272848b73' date '31 December 2018' time '8:41:25.840063 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.333' message 'Updated UziProtocol breakpoint-related messages' id '046f0942-e710-1248-97a2-66b3f2b1c50c' date '31 December 2018' time '8:38:22.317063 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.332' message 'Implemented "step over" and "step into".' id 'd5ce6bf2-d735-bf47-b721-ecc88bc2e725' date '31 December 2018' time '6:46:34.264063 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.331' message 'Added method #nextStatements to the UziParseNode hierarchy.This will be used for the "step over" debugger action.' id '12bb7a08-44b2-db4a-b2bb-4d3d6509781f' date '31 December 2018' time '6:45:14.297063 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.330' message 'Added a "parent" inst var to UziParseNode.This variable is configured automatically in the #initialize method. To avoid errors when serializing/deserializing the programs I made two small changes:1) I added "parent" to UziParseNode class>>#jsonExcludedInstVarNames. This avoids an eternal loop when serializing.2) I changed UziJSON>>#createFromDictionary: to use #basicNew to create instances and only call #initialize after setting their inst vars. This is required because #initialize uses #children to set the "parent" inst var.' id 'c58ce055-2d7d-2a41-9011-e83d7ae46d14' date '31 December 2018' time '5:31:56.036063 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.329' message 'Added UziProgramPrinter>>#intervals' id 'a3793f8e-2270-6c4a-9d66-6e8e18766163' date '31 December 2018' time '11:44:07.629063 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.328' message 'Changed UziDebugger to trigger an event on every update.' id 'db0cb710-5958-7042-82c2-1bbc142f8b96' date '31 December 2018' time '11:43:18.066063 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.327' message 'Changed how the debugger works.Before, the debugger was attached to a particular script. Now, the debugger will listen to any vm update from any script. This is aligned with the recent changes in the vm that only support a single halted script at a time.' id '86725f80-9f49-814f-b911-a6aff2bba719' date '31 December 2018' time '11:20:49.912063 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.326' message 'Updated the UziProtocol debugging messages.Removed the old #setBreakCount:value: and fixed the callers by using the new methods.' id 'c09b3eed-c75f-1c4f-ae14-09055c15d388' date '30 December 2018' time '6:04:54.461146 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.325' message 'Added two VM tests.' id '0c7e6649-3fb7-3f46-8126-5b911d52fa76' date '30 December 2018' time '6:03:09.467146 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.324' message 'Added a new test to make sure that changing the program resets the VM.' id 'a71eab9f-cd71-6e4c-92cc-bd63d9dcc04e' date '27 December 2018' time '11:35:30.080961 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.323' message 'Added another test for the debugger.' id 'd7f1719f-a5d9-8c4e-b5ed-6886f10c70bb' date '27 December 2018' time '11:09:53.578961 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.322' message 'Added a debugger test.' id '3af88d6c-2a1d-c94c-852c-cf59acc2339a' date '27 December 2018' time '9:54:04.494961 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.321' message 'Updated UziProtocol breakpoint support.' id 'a894fab3-32fc-d642-a2fb-d88d275e5833' date '26 December 2018' time '5:16:48.521351 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.320' message 'Changed UziProgramPrinter to print args/locals in two lines.' id 'ea9feb2c-46af-8b42-bc8e-8d7536d14e6f' date '26 December 2018' time '11:20:18.345486 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.319' message 'Improved UziStackFrame>>#annotatedStack.Now it annotates the values so that we know what they represent.' id '7622dc70-19cf-634f-b3ea-bb94e63952a9' date '26 December 2018' time '11:11:03.971486 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.318' message 'Added the program as inst var to UziStackFrame.' id '208353bb-5cc2-d54d-a2ea-a97c6248f622' date '26 December 2018' time '9:29:50.798486 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.317' message 'Added UziStackFrame>>#annotatedStack.This method will print a more useful version of the stack for the debugger.' id 'a90910a8-05d3-e140-b157-de10b62e5431' date '26 December 2018' time '9:15:06.037486 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.316' message 'Changed UziStackFrame>>#temporaries to return the values in reverse order.' id 'ed3904a7-eff5-414d-b2d3-2bb5c9eca095' date '21 December 2018' time '4:14:03.012798 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.315' message 'Added UziStackFrame>>#fp' id '0db19793-eb87-0a4f-bea2-d9f5abafbf84' date '21 December 2018' time '4:13:02.650798 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.314' message 'Changed instruction printing to include the index in the program.' id '02e06140-8021-7f4a-a1c3-bf33d6376732' date '21 December 2018' time '4:11:58.499798 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.313' message 'Added method UziStackFrame>>#temporaries' id '699f6942-d616-2b47-b278-e3d7b6c7b547' date '21 December 2018' time '12:15:15.488522 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.312' message 'Improved how UziVariables are printed by using #displayName.' id '25287ed2-4014-8c42-bbbc-8c11ae18b23c' date '21 December 2018' time '11:53:00.170522 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.311' message 'Added method UziVariable>>#displayName.' id '86a94250-1658-8740-ae6c-c853e7c0182f' date '21 December 2018' time '11:51:46.724522 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.310' message 'Improved printing of UziStackFrame.It was using the old syntax.' id '88a80251-a805-3240-933f-f665010c1845' date '21 December 2018' time '11:32:31.307522 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.309' message 'Renamed UziDebugger>>#stepOver to #stepNext' id 'eb2e5443-4fdb-e948-9135-365523742967' date '21 December 2018' time '11:21:42.941522 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.308' message 'A few changes to UziProtocol.- Added UziProtocol>>#connectOn:. This method will choose which type of port based on the argument.- Fixed port type selection so that it works in linux. Now it checks for ''COM'' and ''/''.- Changed UziResource>>#processConnect: to delegate on the protocol the decision of which type of port to use.- Added logging of the type of port to the transcript. To improve the messages in case of error.' id '6b3e7fb2-e18a-f64c-8822-38dd552ce9b5' date '28 November 2018' time '5:48:30.358 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.307' message 'Fixed validation of script calls.Now it avoids calls with more arguments than the script expects. Less is accepted, though, and their values are initialized to 0.' id '20c43075-d66f-0343-a81a-d581210b0ec7' date '24 November 2018' time '11:00:51.699 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.306' message 'Fixed test to make it work on linux.' id 'f923f6ac-6d37-7c44-ae21-d98b715eb480' date '22 November 2018' time '4:18:49.099 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.305' message 'Changed Uzi to store the default directory as a relative path.' id '5905ae3b-d539-b44d-84ab-18ae9efbecd3' date '22 November 2018' time '3:53:03.113 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.304' message 'Fixed references to #upTo: to #copyUpTo:' id '1d6c7fc6-37c5-a945-8a49-6c81efb85b8c' date '22 November 2018' time '12:41:04.504 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.303' message 'Added a few comments.' id 'a05f3d74-ea1e-9540-b9be-8787a31eed74' date '22 November 2018' time '12:28:21.602 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.302' message 'Renamed Uzi>>#gitDirectory to #defaulDirectory' id '258aecfe-f7f3-824a-9b6f-760afa609cee' date '22 November 2018' time '12:05:07.901 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.301' message 'Added "id" inst var to UziParseNode and changed server to send it as part of the "program" response.' id 'b027df50-a527-6246-9e8d-e92abbedc9b7' date '29 August 2018' time '9:53:59.474 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.300' message 'Fixed problem in UziParseNodePrinter when a call has "_" in the selector.' id 'af32147f-25fd-174a-a531-1cbf2f2bd23c' date '28 August 2018' time '5:28:33.066 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.299' message 'Fixed UziParseNodePrinter.It was still expecting UziScriptRefNode instances as part of the script control nodes.' id '74893ccb-9c74-9f4b-9034-30f705f38570' date '28 August 2018' time '2:09:19.444 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.298' message 'Big refactoring.- Removed three parse nodes: UziScriptRefNode, UziScriptCallNode, and UziPrimitiveCallNode.- Added a single UziCallNode class to represent both primitive and script calls.- Both UziCallNode and UziScriptControlNode know their script names directly (when applicable).- As the final step in the parsing process, UziParser will resolve the primitive calls and set their primitive name. This allows to override primitives with user scripts.' id '7fb6c041-ddad-0640-b763-fdaa6e1f9252' date '28 August 2018' time '1:35:01.142 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.297' message 'Fixed monitoring bug when a global has value that cannot be encoded in JSON.' id 'b88d1e27-9d57-4943-97a1-c069da10d5b4' date '25 August 2018' time '2:54:36.4 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.296' message 'Removed #squared from UziParser>>#primitiveForSelector:' id '7e35bc04-2df4-d041-82e1-cc2cb5023a40' date '24 August 2018' time '3:06:52.159 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.295' message 'Renamed selector for the ! operator to just #! (was #not)' id '707b1ec2-8eca-9047-8dfb-31c8998315ed' date '23 August 2018' time '1:25:59.646 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.294' message 'Fixed bug in UziParser that was treating the ! operator as having lowest precedence.' id '5590d0cd-5057-7847-970f-0009957c6a26' date '23 August 2018' time '1:09:21.295 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.293' message 'Fixed parse tree validation of global declarations.' id 'ce151173-5caf-9241-b181-0f2f6993ad47' date '22 August 2018' time '7:41:55.07 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.292' message 'Added UziPinLiteralNode class.' id '209bda0e-b66c-3944-9f84-f436579de657' date '22 August 2018' time '7:36:28.322 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.291' message 'Renamed UziNumberNode to UziNumberLiteralNode.Also, renamed #isNumber to #isNumberLiteral. This way instances of UziNumberLiteralNode do not appear equivalent to squeak numbers (which was breaking a lot of tools).' id 'ebad4b49-ef21-6040-8415-7688091f4c7c' date '22 August 2018' time '6:26:46.256 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.290' message 'Changed UziParseNodePrinter to remember the intervals for each node.This way I can set the tokens correctly for all nodes and not just the root. Now the debugger uses the generated sources when the program comes from blockly.' id '6c700dd6-caab-5a41-8fe8-7ab6506d2ac1' date '22 August 2018' time '6:17:29.575 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.289' message 'Changed UziProgramResource>>#summary: to include the AST and bytecodes.' id '28d41a26-d600-4f49-8a17-719f8cae22a3' date '22 August 2018' time '1:17:33.752 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.288' message 'Moved ticking rate validation from constructor to the parse tree validator.' id '66f4e688-4a7f-3c4a-9099-ee60a2961f27' date '22 August 2018' time '12:48:39.107 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.287' message 'Fixed UziParseNodePrinter.' id '61aa2e3a-d100-3046-8426-6db234c81819' date '22 August 2018' time '11:49:34.907 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.286' message 'Changed task syntax.Removed the #once keyword. Now, if no task state is specified the task will run once.' id '4bbf98d7-1316-2740-aca7-314528468a44' date '22 August 2018' time '11:29:39.976 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.285' message 'Implemented methods to encode objects in UziJSON.' id '8c3918cc-3176-5249-85ab-cfc1fd77b9ca' date '22 August 2018' time '11:15:30.466 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.284' message 'Fixed small issue when generating the source code for script calls.' id '5071f80e-7d92-8e48-82f3-993daf17cdd4' date '19 August 2018' time '1:30:37.445 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.283' message 'Added UziProgramResource to expose the current program to the web tools.For now, it only returns the source code. I changed Uzi>>#parseJSON: to generate the source code from the JSON using the UziParseNodePrinter. I will later fix this implementation to actually configure all the tokens. That would allow me to use the UziDebugger on blockly generated programs.' id '1d782f50-c66e-4d40-864e-7c9df98bac20' date '19 August 2018' time '12:43:11.284 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.282' message 'Removed a few unused methods.' id 'e191d25f-7b98-a64a-8494-a1e0eba0aac1' date '19 August 2018' time '11:33:55.007 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.281' message 'Renamed argument.' id '635d90e9-45b5-ac42-aa92-df2b7e6b1de9' date '19 August 2018' time '11:20:03.212 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.280' message 'Changed UziJSON to look for the "__class__" key instead of "type".This way we can have "type" as an instance variable without breaking the JSON decoding.' id 'e072c0d2-760e-0649-8085-bc697e50b4d7' date '19 August 2018' time '11:08:41.686 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.279' message 'Small refactor.- Renamed UziJSONParser to UziJSON.- Renamed UziJSON>>#parse: to #decode:' id '88ea721d-9c9e-6345-8186-07df0d8e3353' date '19 August 2018' time '11:01:14.207 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.278' message 'Added UziParseNodePrinter.This class generates the source code from a parse tree. This would be useful to show the textual version of blockly code.' id '1b8b0ee2-1353-054f-84dc-8596408c8364' date '16 August 2018' time '10:55:39.938 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.277' message 'Added UziGlobalResource to expose the globals to the web tools.' id '434b49a2-a6cc-be4f-8b67-e2bf0b078faf' date '14 August 2018' time '6:45:46.494 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.276' message 'Changed UziProtocol to keep monitoring globals with the same name in different programs.Also, implemented #printOn: in UziPin and UziGlobal.' id 'a5fd1625-47d1-a148-8df3-287506fddcf4' date '14 August 2018' time '5:54:35.495 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.275' message 'Updated monitoring of global variables in UziProtocol.Essentially, I copied the pin monitoring and added a few methods to get a global name from its number and viceversa.' id 'e0c34096-2cd3-b243-87e5-ae9a4ac91ec5' date '14 August 2018' time '5:33:41.189 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.274' message 'Updated UziProtocol>>#minorVersion.' id '6d2078b8-e61b-1c4c-a7fa-df6e7bb0f058' date '14 August 2018' time '4:33:47.516 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.273' message 'Refactoring protocol classes.- Added new category ''Uzi-Core-Protocol''. - Moved UziProtocol and UziProtocolEvents into the new category. - Added UziPin class.- Removed most of the pin related inst vars from UziProtocol and moved its responsibilities into the UziPin class.- Removed support for changing the pin mode.' id '55f58c6b-536c-b34b-99bc-f6199f13e288' date '14 August 2018' time '4:14:19.184 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.272' message 'Small fixes in UziProtocol.' id '94b17035-47cb-564d-9c77-b808cd043f68' date '14 August 2018' time '1:46:47.787 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.271' message 'A few changes to the monitoring protocol.- Removed the call to #startReporting in UziProtocol>>#setPin:report:- Changed UziProtocol>>#cleanUpPins to stop monitoring if a pin was not accessed in less than a second.- Changed UziProtocol>>#getPinValues: to start monitoring a pin if it wasn''t before.- Removed the (now unnecessary) method UziPinResource>>#activateReportingFor:' id 'd31d9c76-e846-1d47-93d3-ae5f66a143aa' date '14 August 2018' time '12:55:00.171 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.270' message 'Changed UziProtocol to keep track of the accesses to the pin values.If a pin was not accessed in over 10 seconds it will tell the board to stop monitoring it.' id '9c063bac-e21a-4441-8992-7e8fe0f920ec' date '14 August 2018' time '11:35:03.533 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.269' message 'Changed UziPinResource>>#detail: to use request parameters to filter the protocol pins.Also, removed a lot of unused methods.' id '2eb9d9dd-9d31-cb44-b6fb-6f5958f3eb8f' date '10 August 2018' time '6:17:57.842 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.268' message 'Updated UziServer resources to work with the new REST project.' id '9eec1f0d-09e1-8747-9bf1-ff5cdce14c83' date '10 August 2018' time '4:50:32.329 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.265' message 'Updated UziProtocol.- The #privateDisconnect was changed to reset the "pinValues" inst var.- #processPinValue was updated to read the timestamp from the serial.- #getPinValues: was changed to treat the timestamps as numbers instead of DateAndTime.- #minorVersion was incremented.' id '71fb42cd-0177-fd47-b558-5a162966548d' date '7 August 2018' time '8:07:29.516 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.264' message 'Added event #reportingChange.And updated UziResource to have a "changed" flag for each connected client .' id '4ef98bec-c763-af43-9d84-711d32bdf3a0' date '6 August 2018' time '5:17:17.009 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.263' message 'Fixed small multithreading bug.' id '7f84243d-6efa-f04a-a4c4-a75ed0c19a2a' date '6 August 2018' time '3:55:17.118 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.262' message 'Added UziPinResource to allow monitoring pins from the web tools.' id 'dcd1d2bf-c967-0c46-973d-f351f5a869f9' date '6 August 2018' time '2:50:07.239 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.261' message 'Changed UziResource to centralize the reference to the protocol in UziServer.' id 'e57bc7e7-7a00-c644-8ca4-91f6fc1fa81d' date '6 August 2018' time '1:16:42.996 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.260' message 'Changed UziProtocol to store a 10 second history of each pin value.' id 'cd10af8e-0e48-1c4d-935e-39ca14540fa6' date '6 August 2018' time '11:58:00.415 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.259' message 'Added primitives to the parser and prim spec: #delayS, #delayM, and #minutes.Also, added tests to the UziVMTestFilesGenerator.' id '72282a97-4226-5d45-8aa5-751e0316477a' date '6 August 2018' time '10:27:41.201 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.258' message 'Added tests for primitives: isEven, isOdd, isWhole, isPositive, isNegative, and isDivisibleBy.' id '51da9486-ec2d-2f4b-8399-4a4cd58eb037' date '5 August 2018' time '9:37:52.023 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.257' message 'Added tests for primitives: constrain, randomInt, and random.' id '1556b2f8-2a4e-f347-ba15-359fc701a248' date '5 August 2018' time '8:10:27.4 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.256' message 'Added tests for power, isOn, isOff, and mod primitives.' id 'a869556d-ef5a-b744-bf55-3a214ce19dd8' date '5 August 2018' time '1:39:31.77 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.255' message 'Added tests for asin, acos, and atan primitives.' id 'bc39f6f9-20c7-e24e-ba65-e8635397c91f' date '5 August 2018' time '12:52:59.673 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.254' message 'Added #isCloseTo to the parser and primitive spec.' id 'f5beada1-208a-714a-af8f-ca55ff7c04df' date '5 August 2018' time '12:34:41.254 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.253' message 'Added tests for the primitives: ln, log10, exp, and pow10.' id '1d40644e-d237-f24f-b6e7-dd3e6a4aa624' date '3 August 2018' time '5:20:00.194 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.252' message 'Update #test060Abs' id '62a11802-3fa7-2546-8f6a-c45288c541e1' date '3 August 2018' time '2:20:21.366 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.251' message 'Added test for the abs primitive.' id 'c6468e88-eea8-f44f-ac53-e188db8202f1' date '3 August 2018' time '1:36:23.62 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.250' message 'Added seconds primitive to the parser.' id '56f418f7-52c5-5f44-9469-82de9284e138' date '3 August 2018' time '8:44:02.872928 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.249' message 'Added selectors for the new primitives. And added VM tests for round/ceil/floor/sqrt.' id 'ef2c4c4c-2d32-214b-a7c7-1b431e70d459' date '2 August 2018' time '9:54:14.901 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.248' message 'Fixed small bug that was making a lot of tests fail.' id 'f077b446-1e6c-4f42-b6b1-da07f861f340' date '2 August 2018' time '9:01:45.392 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.247' message 'Added new event #runProgram.' id 'dee416e5-af69-a145-a3aa-9755d27767af' date '2 August 2018' time '8:26:57.994 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.246' message 'Small refactoring.Added a class UziProtocolEvents to centralize the event symbols I''m using to interact between the UziProtocol and the server.' id '77d8a7fb-c48c-2541-bb3d-2fe64aa2dea5' date '2 August 2018' time '11:49:53.497 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.245' message 'Added a few primitives to the primSpec. Still not implemented on the VM.' id '7325fe68-2c0b-0347-aada-2ae5085f726c' date '1 August 2018' time '4:37:15.514 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.244' message 'Added hack that allows parsing Infinity from a JSON string.' id '741aa585-a7b9-f944-b120-48ce995d6862' date '1 August 2018' time '11:57:41.014 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.243' message 'Added a few primitives to the primitive spec.They are not implemented on the VM yet but I add it so that the compiler doesn''t complain.' id '5014595f-a174-6d41-abbf-7cccbcc66c7a' date '1 August 2018' time '11:27:07.731 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.242' message 'A few changes that impacted several methods.- Added UziJSONParser. For now it''s just a hack that reads a json string and generates an object via reflection.- Added Uzi class>>#compileJSON:- Changed UziResource to take into account the program type and either compile it as a string or json.- Changed UziPrimitiveCallNode to hold the primitive name and lookup the primitive when needed.- Renamed primitive #yieldTime to #delayMs.' id '6f91cf54-068e-a942-b6f5-7f946a1dbabc' date '31 July 2018' time '6:13:51.291 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.241' message 'A few changes to make sure all tools use the UziTranscript.Essentially I centralized most uses of the UziTranscript in UziProtocol (except the debug mode in UziSerialStream).1) I added UziProtocol>>#compileString:, which not only compiles the program but also encodes it and logs the program bytes to the UziTranscript. In case of parse/compile error, the error is also logged to the transcript.2) Changed UziProtocol>>#install: to also log a message to the UziTranscript.3) Changed UziResource to always delegate to its protocol.' id 'fd5e1694-7a27-1744-99a7-ceabb3ffa498' date '30 July 2018' time '12:17:09.598 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.240' message 'Changed UziResource to hold a semaphore for each client.This way I can have multiple windows with different demos connected to the same board and all the windows update their state at the same time.' id 'ed67e3ac-987f-b544-80c4-ab97b602c4c3' date '30 July 2018' time '10:53:08.375 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.239' message 'Changed UziProtocol to trigger the #connect event before starting all the processes.' id '0b42aead-5da1-cd42-bafe-99b2a002cce6' date '30 July 2018' time '10:43:32.711 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.238' message 'Changed UziResource to unsubscribe to protocol events.' id '7969da72-b5bf-6b47-89fc-78c24ef46703' date '30 July 2018' time '9:45:06.282 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.237' message 'Changed UziServer to accept a protocol as a constructor parameter.' id 'f4fd0cdf-78b7-994a-b436-e331c07371b1' date '27 July 2018' time '9:28:51.342 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.236' message 'Added UziServer>>#start and #stop.These methods will start/stop a global instance with the default server directory (which I added to the Uzi config paths)' id 'f6e2ed94-4738-0149-b00d-e3d3095f811b' date '25 July 2018' time '11:24:59.624 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.235' message 'Fixed indentation' id '74c526a6-6d65-344a-9b9d-46a5c642bfd5' date '25 July 2018' time '10:42:00.812 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.234' message 'Another small refactoring.' id 'da43734a-673f-7545-8e75-449da7184e2e' date '24 July 2018' time '8:40:47.294 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.233' message 'Small refactoring.' id '65d625f6-baa5-1248-8902-79d8e59c556f' date '24 July 2018' time '8:35:14.044 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.232' message 'A few improvements and fixes to the communication protocol.- Removed forking in UziProtocol>>#privateDisconnect. I added the forking only in the places it was necessary.- Added a few delays in UziProtocol>>#requestConnection. I''m not sure these are needed, though. I was testing with a board that failed to connect from time to time and it seemed to me that waiting a little before reading helped. But I don''t know. In any case it doesn''t hurt to wait a little.- Added a flag to UziSerialStream to log everything to the Transcript.' id '45552df6-defc-8440-91df-cb36ddfa4a39' date '24 July 2018' time '8:27:58.643 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.231' message 'Fixed operator precedence.' id 'a128018e-64e8-d84e-8e58-c7fede254c2a' date '24 July 2018' time '5:48:21.917 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.230' message 'Added a few tests for operator precedence and refactored binary expression building.' id '34121166-f66b-7d42-96b7-ad090a16901d' date '12 July 2018' time '9:23:57.173 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.229' message 'Improved UziProtocol, particularly regarding timeouts and disconnections.I added a timeout to UziSerialStream, before it could hang forever waiting for a byte to arrive. Then I changed UziProtocol to handle timeout exceptions correctly (depending on the case, it could mean either ignoring the error or disconnecting).I also added handling of the DISCONNECT_ERROR, which happens when the firmware doesn''t receive a keep alive signal in time. I added this because if, for some reason, the client takes too long in sending the keep alive message and the firmware gets disconnected we wouldn''t noticed it until everything stops working. The most common reason for this to happen (at least, in my experience) is dragging Squeak windows, which seems to stop executing the keep alive process (regardless of its priority).' id '134beffe-3849-3a4b-bca3-fa27586d6501' date '10 July 2018' time '9:53:01.304 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.228' message 'Added a few contants to UziProtocol class and removed magic numbers.Also, I renamed existing methods to use the same conventions as the firmware.' id '2234dda2-3b6c-5d42-bff3-b741d88de017' date '6 July 2018' time '9:39:20.96 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.227' message 'Small refactoring.' id '62a99ae9-3caf-da4d-a65d-4893ddbd996c' date '23 May 2018' time '11:36:36.853 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.226' message 'Fixed UziCompiler to allow locals with the same name in different scopes.' id '5781d09e-6f35-d746-9fb7-ebb379d7688a' date '23 May 2018' time '11:25:08.006 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.225' message 'Simplified implementation of UziParseNode>>variableDeclarationsUpTo:' id '11df7349-bd76-bd48-a5e4-ea89074b20fa' date '23 May 2018' time '9:57:15.238 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.224' message 'Big refactoring.Removed all the implementations of #= and #hash in the UziParseNode hierarchy. And added an utility UziParseTreeComparer that can be used to compare parse nodes in tests.' id 'a5814cc5-5c33-1144-9195-bedc64570bff' date '21 May 2018' time '4:06:39.535 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.223' message 'Changed the parse tree validator to allow locals with the same name declared in different scopes.' id '6ed9cbf8-c984-1343-9f70-dd7ab542b9e4' date '19 May 2018' time '4:38:42.432 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.222' message 'Added another test for local variable scope.' id '9ea41445-e97c-8249-ac26-5271f6638d5d' date '19 May 2018' time '3:19:53.412 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.221' message 'Added a new test to check for local variable scope.' id '068a30b4-6f4d-1145-9fc8-f76bda5df6f8' date '19 May 2018' time '3:16:00.361 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.220' message 'Added a few methods in UziParseNode that help traverse the AST.Using this new methods I refactored UziBlockNode>>#locals and removed all the implementations of #variableDeclarations.' id 'c5dac086-4c69-ba4d-b485-298d8cf10543' date '18 May 2018' time '9:02:44.757 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.219' message 'Changed UziForNode''s counter inst var to be a variable declaration.It was just a variable, which made me hack a method UziForNode>>#counterDeclaration which would create an artificial variable declaration for the counter var. Now the parser will generate an UziVariableDeclaration from the start and the code becomes simpler.' id '3c3d0270-4eaa-5546-82f1-0119f7bd9ff9' date '17 May 2018' time '12:25:10.59 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.218' message 'Added abstract method UziParseNode>>#children and implemented in subclasses.Using this method I can traverse the AST in a generic way and perform all sorts of queries. For now, I''m only using it to collect the variable declarations in a given scope.' id '3a597619-efeb-4a4a-8a27-1753d53fa273' date '17 May 2018' time '10:06:35.267 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.217' message 'Refactored UziParseTreeValidator to store the path from the root to the current node in a stack.Actually, it uses an OrderedCollection but it automatically inserts the new node at the beginning after visiting and removes it afterwards. This way, the current node is the first element and the program (root) is the last.' id '8e8112e0-d4b8-a94e-b322-78f031b4384f' date '2 May 2018' time '8:20:12.279 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.216' message 'Simplified Uzi config by making all the required paths dependent on the new Uzi>>#gitDirectory.' id 'f0ca957a-0471-f240-b338-7665c0438e47' date '30 April 2018' time '3:17:05.027 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.215' message 'Added a couple of tests for the Mutex and Channel libraries.Also, small fix on UziProgramPrinter.' id 'a230bfcd-1b92-884f-baa1-76409d195bc1' date '29 April 2018' time '10:58:57.826 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.214' message 'Fixed comment.' id 'cad524eb-c82c-9744-a052-64c420fbe0da' date '26 April 2018' time '3:29:26.717 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.213' message 'Changed compilation of "for" loop to evaluate stop before step.' id 'dcc12166-7ba7-ef4e-a7d5-963e69c7c930' date '26 April 2018' time '3:26:45.91 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.212' message 'Fixed reverse for loop and added tests.' id 'b18027dd-8300-b744-a6b6-3c9e492fef19' date '25 April 2018' time '10:41:03.238 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.211' message 'Added a test to verify the "for" loop is working.' id '66312a7e-a188-a644-8528-0a78cccfab73' date '25 April 2018' time '9:28:50.364 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.210' message 'Implemented "for" loop.' id '274d1151-290c-6545-bb77-7f46d6b3d0fc' date '21 April 2018' time '8:17:39.73 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.209' message 'Added a "forever" loop.' id '9b9fa51c-710d-d447-9362-8fbf409e5548' date '21 April 2018' time '6:42:22.461 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.208' message 'Changed identifier grammar to accept underscores.' id '45d4abf7-04d6-b441-a934-14f308ffa720' date '21 April 2018' time '6:14:07.919 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.207' message 'Updated imports syntax.Instead of an equals sign (=) now we use the "from" keyword.' id '63c41c9d-4f31-8c44-b1a8-f0a01ddf8720' date '21 April 2018' time '5:57:27.391 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.206' message 'Removed a few unused methods from UziBlockNode.' id '64ca09dc-6f80-dc48-a564-a9f171ee8f72' date '18 April 2018' time '11:30:49.879 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.205' message 'Removed validation that only allowed script blocks to have locals.' id '19a253b5-7af8-c746-90c2-5f039d72c502' date '18 April 2018' time '10:59:38.432 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.204' message 'Fixed bug in UziBlockNode>>#locals that was only returning top level locals.' id '08555234-93b9-a24e-9959-c24e4091c59d' date '18 April 2018' time '10:51:17.064 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.203' message 'Changed parser to treat variable declarations as just another statement.Before it would only allow them at the beginning of the script, now they could go anywhere a statement is allowed.This allowed me to refactor the UziBlockNode and remove its "locals" inst var. I left the UziBlockNode>>#locals method, though, and it now looks for variable declarations in its statements. This implementation would probably fail if variables are declared in nested blocks but I''ll fix that later.' id 'c1afc941-86c5-7c4d-9e68-0cfbc3a2e8d3' date '18 April 2018' time '10:29:18.211 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.202' message 'Added a few extra checks in UziParseTreeValidator.' id 'a432418e-2b2b-b349-a96c-8a0cbaed06fa' date '17 April 2018' time '11:24:43.564 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.201' message 'Added test and small refactor.' id 'e0bab461-cabd-fd47-9e9a-8efaaeee1493' date '17 April 2018' time '9:36:38.415 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.200' message 'Changed UziParseTreeValidator to look for duplicate script names.' id '7c4c1f52-c701-a943-8567-a64dce3baba2' date '17 April 2018' time '9:32:14.03 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.199' message 'Implemented primitive #serialWrite and UziProtocol>>#processSerialTunnel.' id '9c4d69cf-09a9-ce4d-aa5e-486b752bafff' date '17 April 2018' time '8:42:17.509 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.198' message 'Fixed bug when trying to connect to an arduino without UziFirmware.' id 'ef30e482-1707-b34a-b18d-c1a0dd3ee613' date '13 April 2018' time '1:25:03.576 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.197' message 'Added UziTranscript utility.It''s just a class with a bunch of methods to simplify the multithreaded access to the Transcript.' id '1f735c5c-beb9-af4c-bd35-e35bb8a7a646' date '13 April 2018' time '1:18:19.724 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.196' message 'Implemented yield instruction.' id '4bdfbb3e-0238-3b43-8bf9-3068b2ec8018' date '13 April 2018' time '12:36:26.145 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.195' message 'Implemented handshaking to UziProtocol' id '521fa002-7cee-5946-95d9-1fabb074b7ca' date '12 April 2018' time '7:11:41.255 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.194' message 'Changed UziProtocol>>#keepAliveTime to 100.' id 'b17e0325-c9df-d64a-8ebb-64f49e27d0b7' date '12 April 2018' time '8:13:06.723 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.193' message 'Added a new test to UziVMTestFilesGenerator.' id 'c6f72758-0bb6-1047-989e-32a83598fb19' date '11 April 2018' time '10:15:07.829 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.192' message 'Fixed parser support for the coroutine() primitive.' id '4e174a59-cf70-124a-a1bf-3de47e0feb39' date '10 April 2018' time '4:51:23.622 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.191' message 'Fixed bug in the parsing process.The alias applier was returning a string instead of a script reference when visiting a script call.' id '8634b719-d612-704c-8ef1-d0b75d6945a1' date '10 April 2018' time '4:42:27.711 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.190' message 'Added READER_TIMEOUT error.' id '1363060a-e4f2-c441-ac89-2da110198ec0' date '7 February 2018' time '8:27:17.63357 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.189' message 'Changed UziEncoder to support more than 63 globals with the same size.' id '030cf200-dbbc-0a46-956b-b038f1e11368' date '7 February 2018' time '8:19:18.32557 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.188' message 'Changed UziProtocol>>processError to understand OUT_OF_MEMORY.Also, now the error message doesn''t have to be associated with a script.' id '372fbb6d-1bc7-0340-957e-3a3c52fd9af8' date '6 February 2018' time '7:37:47.2 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.187' message 'Fixed small bug in UziProtocol>>#processError.If the currentProgram was nil, then receiving an error would raise a debugger.' id 'af94a22c-6c3c-f442-848e-672a96b86739' date '6 February 2018' time '12:22:01.954903 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.186' message 'Updated UziProtocol>>processFreeRAM' id 'c8716cf9-5ce0-b246-803f-bc0a4367bca4' date '5 February 2018' time '7:05:57.622 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.185' message 'Fixed small bug in UziDebugger and updated #estimatedSize.' id 'bf30edb2-f906-cd47-a5d4-7ea8bc6dd2b3' date '13 January 2018' time '7:49:02.571268 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.184' message 'Changed UziProtocol to handle the new RS_FREE_RAM response message.' id '1a7d3920-a303-fa40-9fcf-c6621ce82f0f' date '11 January 2018' time '2:51:41.507089 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.183' message 'Updated #estimatedSize.' id '054f8c55-88fe-ac42-b802-7f91233eb326' date '11 January 2018' time '12:37:37.022089 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.182' message 'Added a few methods that help calculate the size of a program in the Arduino SRAM.This calculations might not be accurate, though. I''m currently using them just to optimize the use of memory. Once I change the VM implementation this numbers could probably be outdated so I''ll probably just remove these methods.' id 'd8ea9391-768b-994e-8ae1-44bcb739f2db' date '11 January 2018' time '10:46:42.996606 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.181' message 'Small refactor in UziEncoder>>#writeGlobals:' id 'b460d064-a6b5-cf43-89ed-95eb32e5c2f4' date '9 January 2018' time '7:17:18.714585 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.180' message 'A few changes.1) I changed default paths everywhere to use C: as root.2) I moved the #defaultGlobals method from UziEncoder to UziProgram class. And I added the method UziProgram>>#allGlobals, which will return the globals list sorted and ready to use by the UziEncoder and also the UziProtocol.3) I changed some references to UziProgram>>#sortedGlobals and replaced them with #allGlobals in UziProtocol, thus fixing the bug of global reporting.' id '1cdd550e-a274-4b47-8896-3c0f78d41682' date '9 January 2018' time '7:12:22.692585 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.179' message 'Fixed encoding issue with fractions.Now UziVariable converts any fraction value to float. I''m not sure this is the right approach though, we''ll see...' id 'fa4fcb9c-0d4f-493c-a4c5-3f80d0004ecc' date '8 January 2018' time '1:48:35.867555 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.178' message 'Implemented encoding of extended instructions.' id 'e735b6e5-ecf7-7844-bc52-e90c2bc544c1' date '6 January 2018' time '1:20:56.059 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.177' message 'Small refactor to simplify the encoding of global references.Now UziVariable implements #= so after encoding the program globals I just add the default globals to the beginning of the list and UziEncoder>>#indexOfGlobal: can simply lookup the index of the variable.' id 'f33d1574-de07-f14e-a38c-8754f0177389' date '5 January 2018' time '5:39:09.652 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.176' message 'Added a few more tests.' id '2461bb6e-2db5-2b43-bd39-2f0eecd3ad0f' date '11 December 2017' time '1:05:37.571 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.175' message 'Added a few tests.' id '02c894e8-76f0-4547-bfea-d68729ee14a3' date '11 December 2017' time '12:22:59.638 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.174' message 'Added a few tests for the vm.' id 'a47eb826-585b-764b-a926-695c376be6cf' date '10 December 2017' time '10:37:04.176 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.173' message 'Changed UziEncoder to support default globals.' id '332b5910-f7d3-9e42-8c73-3fd4be1605c1' date '9 December 2017' time '4:52:26.296 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.172' message 'Added new test class that will generate test files for the VM test suite.' id 'd1a6afb1-b45c-2f4b-80ca-4df65edfa262' date '9 December 2017' time '4:18:02.074 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.171' message 'Added a few extra halts in the encoder.The point is to find out quickly if I try to encode a program that needs extended instructions that are not supported yet.' id 'f9965eb7-8f14-5544-932b-94c5c701d4f5' date '7 December 2017' time '9:50:52.095 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.170' message 'Implemented pause/resume instruction encoding.Also added a few halts in the places where an extended encoding would be needed.' id '82438e52-c12c-ed4e-a43d-c699dea9775d' date '7 December 2017' time '9:44:42.072 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.169' message 'Fixed a bug that was accepting invalid programs.' id '40ad5f11-ed20-1742-89e7-39e1ed1dbe3d' date '5 December 2017' time '11:16:20.241 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.168' message 'Changed encoding to store the default values of local variables.This values are stored on the global list and each script local points to an index on this list. The same happens with the script interval.' id '3ca41552-84d6-bf47-bbc3-54970a29e7c2' date '4 December 2017' time '9:29:56.384 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.167' message 'Temporary fix for the variable declaration compilation.I added a while back an early optimization if the variable was declared with a literal default value. The problem is that this optimization relied on the encoder to be able to store the default value of local variables. The encoder does not support this (neither does the vm, actually) so the optimization is invalid. Unfortunately I wrote a test with this exact behavior and since I don''t want to change the test for now the test will fail until I fix this in the vm/encoder (soon, I hope).' id '406e3714-f00a-3548-9d84-f7078aaebe46' date '30 November 2017' time '6:24:17.405 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.166' message 'Added a few tests for "pause/resume" and fixed UziAliasApplier.' id '8ca84056-f7bf-d745-89aa-0d61aa6614d7' date '22 September 2017' time '11:28:36.011 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.165' message 'Implemented "pause" and "resume" syntax.' id 'd44d83f3-f4a6-fe4f-b61c-b57c6da0a68e' date '22 September 2017' time '11:16:57.738 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.164' message 'Added a few tests for "repeat" loop and fixed UziAliasApplier.' id '90a99ee8-268b-4d4a-817a-860e3ffb383a' date '22 September 2017' time '10:43:11.997 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.163' message 'Fixed bug with the "repeat" loop.If the repeat was inside another loop the temp variable was not cleared and thus the repeat will only get executed once.Now I clear the temp variable before starting the loop. Maybe later we can detect this step and avoid it wherever possible as an optimization.' id '43e5695c-35d7-a54a-87ab-6d12bd6c5d35' date '21 September 2017' time '7:57:14.331 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.162' message 'Implemented compilation of "repeat" loop.' id '8562c676-0c2e-0945-9970-669769224404' date '21 September 2017' time '7:10:43.404 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.161' message 'Implemented "repeat" syntax.' id '0c0f179b-79ac-554f-b23c-1544c7162ae9' date '21 September 2017' time '6:19:17.73 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.160' message 'FIxed compilation of UziReturnNode when the value is not specified.' id '4b98a5a2-510e-fd43-ad67-e6e1cae76982' date '19 September 2017' time '5:16:57.627 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.159' message 'Renamed test methods so that all selectors follow the same pattern.The pattern uses a number after "test" to order the tests by creation time. I don''t remember who taught me to do that but I find it very useful to see how the tests evolved over time. Unfortunately some of the oldest test classes didn''t follow the pattern so the inconsistency was bothering me.To do this renaming automatically I wrote a script that looks at the oldest version of each method and sorts them by timestamp. It''s not perfect but it seems to work fine for most cases.' id 'ddc7eaba-9dc9-6c47-97b7-ec4713181c20' date '13 September 2017' time '10:44:16.368 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.158' message 'Changed UziParser>>#task to make the tick state mandatory.' id 'b146e1f4-28f4-7a4e-927c-d759b6b6f563' date '12 September 2017' time '8:14:16.682 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.157' message 'Removed unnecessary inst vars.' id 'b54ef1f5-02f7-4844-94f8-ddcebe5dd4a2' date '12 September 2017' time '8:03:09.327 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.156' message 'Fixed bug in UziAliasApplier and added tests.' id 'f82ed771-2355-7040-b0bb-bd144a1f21b5' date '12 September 2017' time '8:01:46.02 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.155' message 'Added a few tests and fixed bug in UziScriptNode>>#=' id '9ba55fab-c2bf-6047-b214-bf1e6b4398d5' date '11 September 2017' time '10:32:40.683 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.154' message 'Added UziScriptRefNode class.' id '3f524028-09c7-6342-93e6-3ba89fbe0765' date '11 September 2017' time '10:10:03.469 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.153' message 'Changed UziParser to allow multiple script references after stop/start keywords.' id '68a313cd-1ebe-5f42-abed-7db22fa2fec1' date '11 September 2017' time '8:10:01.703 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.152' message 'Updated UziServer with HTTPS support.' id '29a50357-01b5-7643-bba5-7670c6c2a95d' date '7 September 2017' time '8:48:57.657 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.151' message 'Implemented "once" keyword for task declarations.' id '24a7ad96-69c2-eb43-859c-2f092217ce29' date '4 September 2017' time '12:24:32.626 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.150' message 'Now it is mandatory to write "running" to specify a task that should start by default.' id '6d1568e1-5493-d749-a5b4-75d048536bcf' date '3 September 2017' time '10:44:22.419 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.149' message 'Changed Uzi class to become a facade for the compilation process.This allowed me to simplify UziCompiler. Now it only has to care about transforming an UziProgramNode into an UziProgram and it doesn''t need to know anything about parsing, resolving imports, and validation. All that is now done in the Uzi class.' id '804a4974-82a7-ca45-8c36-aea9d20946a2' date '2 September 2017' time '9:12:57.065 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.148' message 'Changed UziImportResolver to allow nested imports.' id '35500011-4a64-f147-a511-37795755385a' date '12 August 2017' time '8:23:24.378 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.147' message 'Implemented UziImportResolver.Also, in order to test it I implemented #= and #hash in all  UziParseNode subclasses.' id '5d873554-458e-1b44-bceb-073ee6bc1eb9' date '12 August 2017' time '7:46:21.208 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.146' message 'Renamed UziProgramNode>>#variableDeclarations to #globals.Also renamed references, inst var, and related methods.' id '0d661115-ad8b-814e-983c-9a4cd823ce15' date '11 August 2017' time '9:33:18.473 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.145' message 'Implemented "import" syntax.' id 'c20a4b65-5be5-684e-be4a-a55999ca6696' date '11 August 2017' time '9:26:25.426 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.144' message 'Renamed UziTypeChecker to UziParseTreeValidator.' id '5fefc50a-dfc2-9b40-a208-bbc61f7fdcd9' date '11 August 2017' time '7:19:57.579 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.143' message 'Changed UziTypeCheckerTests to be able to test parse trees that the UziParser is not able to produce.For this, I had to build the parse trees by hand. However, I only did it for the ones that the syntax does not allow. To simplify the task I added a bunch of instance creation methods in the parser nodes hierarchy.' id '33671c8d-5425-ac44-9cde-e806d5d11b98' date '11 August 2017' time '7:16:38.308 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.142' message 'Added a check that only allows starting/stopping tasks.' id '9997ab08-4d9c-6e40-affd-aa7765aeef7f' date '11 August 2017' time '5:38:20.221 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.141' message 'Several small changes.- Fixed a couple of bugs in the do-while/do-until syntax.- Fixed bug in parser that was using $= as assignment and equality operator.- Implemented local declaration using expression value.- Updated UziTypeCheckerTests to new syntax. Some of these couldn''t be updated because the syntax doesn''t allow it. I left them for now because later I will rewrite all so that they don''t depend on the parser (I will have to build the parse tree by hand for each test).' id 'c8b8b2c3-ba70-7441-b581-89ba1ae716e5' date '10 August 2017' time '5:05:03.138 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.140' message 'Added support for defining variables using an expression instead of a constant (only allowed on locals)' id 'ce7837f4-6fd7-c44a-ab36-2b1c4a278dde' date '10 August 2017' time '10:29:18.599 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.139' message 'Cleaning up.' id '3c50315c-419a-fd43-8d66-ee825ba63881' date '9 August 2017' time '9:46:49.097 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.138' message 'Finished porting all compiler tests.' id 'd7b9adac-8f01-6b45-a771-5555b18ddbc8' date '9 August 2017' time '9:42:23.626 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.137' message 'Still porting compiler tests to new syntax.' id '742d56e6-48a6-114c-9235-eb1ea16a7ff4' date '9 August 2017' time '9:31:26.409 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.136' message 'Implemented optional named arguments for script calls.' id '7dc4f6aa-c2fa-fa46-8ccf-6868b8d53696' date '9 August 2017' time '9:21:39.498 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.135' message 'Implemented "until" and "do until" syntax.' id '04b7fa3c-46dc-0848-a9e3-a582bcb88007' date '9 August 2017' time '8:33:49.649 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.134' message 'Porting more compiler tests to the new syntax and fixing parser errors in the process.' id 'e6f87a25-59bc-5340-92ec-50721a8629c8' date '9 August 2017' time '4:12:50.878 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.133' message 'Changed UziCompiler to be able to configure its parser.Also fixed a bug when parsing expressions operating on variables. I started to port the compiler tests to use the new syntax. Finally, I changed the "binary" rule to generate a primitive call with the primitive already set. I''m not sure this is correct, though.' id '56acb1af-c09a-1948-b921-3ba463cb128a' date '9 August 2017' time '1:05:45.783 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.132' message 'Fixed "return" statement to allow no value.' id '7a79884f-fb4a-1d47-af2d-6a9250f9eb54' date '9 August 2017' time '12:31:37.339 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.131' message 'Implemented functions and procedures.' id 'b2434724-f4f9-1643-b7c2-a3c07fc5ba80' date '9 August 2017' time '12:27:56.141 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.130' message 'Renamed script state "ticking" to "running"' id '9986b13f-3efb-ad47-8474-3356a390c13a' date '9 August 2017' time '12:19:50.547 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.129' message 'Implemented local variables and variable references.' id '7b021acb-a016-1b4b-ab7e-30a8e2aabd9a' date '9 August 2017' time '12:12:40.223 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.128' message 'Implemented "do while" syntax.' id '363effed-592d-f743-b4a9-afe21381e531' date '9 August 2017' time '11:36:35.257 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.127' message 'Implemented UziParser>>#statement and #start' id '97e216e2-ddba-d64b-8f15-7e165e0c6e62' date '9 August 2017' time '9:07:09.326 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.126' message 'Implemented logical and/or operators and while statements.Also, simplified conditional syntax by removing mandatory parenthesis surrounding the condition.' id 'ec3ceebd-221c-3d43-8d69-4fb3a5057422' date '8 August 2017' time '11:17:59.441 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.125' message 'Implemented unary negation operator.' id '8a914544-cab6-d548-b880-0ac7166ae5e8' date '30 July 2017' time '6:16:09.893 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.124' message 'Added test.' id 'a97ca3d7-89c8-9145-b0c9-5de2d3e6e0e5' date '19 June 2017' time '11:58:36.329 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.123' message 'Implemented conditionals.' id '05b718df-d8d7-2649-ac22-76bf1a7e7164' date '19 June 2017' time '10:43:45.113 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.122' message 'Renamed UziParser>>#scriptBody to #block' id 'd5a9aa78-fbbb-9942-9d60-c851012a1808' date '19 June 2017' time '10:22:38.3 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.121' message 'Implemented return statement.' id '3cdcefb3-9333-0b42-a142-b5240db5179f' date '19 June 2017' time '10:20:34.554 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.120' message 'Renamed UziVariableDefinitionNode to UziVariableDeclarationNode.' id '44e964b0-a1a0-9d4c-8b2e-f1493bb5a0d6' date '19 June 2017' time '10:14:03.749 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.119' message 'Implemented assignment.' id '2fd2b552-c4b0-2b47-b33d-e6c4bf2af2ae' date '19 June 2017' time '10:07:22.828 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.118' message 'Implemented declaration of variables.' id '61f6b924-f555-e043-a407-ce94974344d6' date '19 June 2017' time '9:59:06.753 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.117' message 'Fixed token of binary operations.' id '289f3355-0a88-394f-8185-63979a67da79' date '19 June 2017' time '9:49:31.503 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.116' message 'Fixed parser bug and added parens.' id '6f76437d-4980-d142-9b4f-6e5948a83f2a' date '19 June 2017' time '9:13:26.575 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.115' message 'Implemented syntax for operators.' id 'f0f4f16e-a405-c740-9ecf-cc921cab832c' date '19 June 2017' time '8:30:47.709 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.114' message 'Fixed test.' id '84ff41d6-25d6-dd48-b1d1-924da4230701' date '18 June 2017' time '8:10:31.587 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.113' message 'Refactored UziBlockNode.Removed the ''arguments'' inst var. Now the arguments are stored in the UziScriptNode.' id 'e9b3a9a4-928e-a54d-8afb-eca44734ee33' date '18 June 2017' time '8:03:08.123 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.112' message 'Added script state and ticking rate syntax.' id 'd0b8283b-8223-2b48-8ec0-d50e2746edb1' date '16 June 2017' time '9:15:17.151 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.111' message 'Implemented syntax for script''s body.' id '5c52a69c-197b-e343-b3c9-9ae37b9035ec' date '16 June 2017' time '9:04:15.803 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.110' message 'Starting to implement new script syntax.' id 'e11d7eeb-6a95-fe49-9e61-7f41bd0e039c' date '16 June 2017' time '8:37:01.883 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.109' message 'Small bugfix and test.' id '20851d65-1ce2-b441-aa2f-babd1a2d9fd1' date '16 June 2017' time '8:23:57.95 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.108' message 'Small changes.' id '5f56e8d4-79dc-bd42-abbf-7e9971f3e62f' date '16 June 2017' time '8:11:22.762 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.107' message 'Implemented function call syntax.' id 'e92b4f16-2425-324e-95e6-dc9c66b3c53c' date '16 June 2017' time '7:58:11.681 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.106' message 'Removed a couple of methods and changed a few methods.' id '747a11d0-77fa-4d47-9ac9-4ca85b2f3a7f' date '16 June 2017' time '7:20:52.484 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.105' message 'Removed UziSpecialVariableNode.I simply replaced it with an UziPrimitiveCallNode. I had to change the UziTypeChecker because when visiting primitive calls it was checking that the number of arguments matched the selector but with special variables they didn''t match.So now all UziPrimitives know how they affect the stack. I changed UziPrimitive>>#primSpec and added that info. I also removed the "isExpression" inst var because now it can be calculated by using the stack transition.' id 'b5385392-8e79-9e4e-a104-206ace29f193' date '16 June 2017' time '7:16:01.853 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.104' message 'Refactored UziMessageSendNode into UziPrimitiveCallNode.Apart from the name, the most important change is that UziPrimitiveCallNode doesn''t have a ''receiver'' inst var. Instead the receiver is the first argument. I had to change all the tests to make this work which was a pain in the ass...' id '96032fc0-611c-0d49-afa7-176b2c248f1a' date '16 June 2017' time '6:41:01.468 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.103' message 'Slowly starting to implement the new parser.' id 'b19a1f19-2654-0540-90ea-cd961e215462' date '16 June 2017' time '6:01:21.52 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.102' message 'Renamed UziParser to UziOldParser.Fixed references and also renamed UziParserTest to UziOldParserTest.' id 'a1e2b5b0-4948-7347-bda2-027d1ffae57e' date '16 June 2017' time '5:41:56.961 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.101' message 'Changed UziStackFrame>>#printOn: to avoid the ''@'' prefix.' id 'dbd6976b-9014-8840-ada9-09e0d7b61288' date '31 May 2017' time '8:13:15.957 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.100' message 'Fixed error with imported scripts argument names.The problem was that arguments and locals of imported scripts where being aliased. Now I changed the code that applies the alias to the parse tree to avoid applying the alias to local variables.' id '7c73dc8d-5668-2d45-8b3a-b6dfcd0a1d93' date '31 May 2017' time '8:09:21.658 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.99' message 'Implemented small optimization on the compiler.The short circuit on logical and/or nodes now it''s avoided if the right expression doesn''t have any side effect. This way we generate smaller code by relying on the logical and/or primitives.' id '7a238205-eaf2-4b4f-98bc-21c6552a5642' date '31 May 2017' time '6:58:37.776 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.98' message 'Renamed "ShortCircuit" nodes to simply "Logical".UziShortCircuitAndNode -> UziLogicalAndNodeUziShortCircuitOrNode -> UziLogicalOrNode.' id '685d7588-e213-6f46-a54b-1555895a6005' date '31 May 2017' time '6:39:41.211 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.97' message 'Added new primitives to the primSpec and parser.Also fixed a bug when encoding primitive calls whose argument is larger than 31.' id 'a9a7f664-c1c0-4c45-a6de-643c8c925d45' date '31 May 2017' time '6:33:19.733 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.96' message 'Implemented PRIM_COROUTINE compiling as a special variable.' id '83fa9eb0-d776-8e42-96e7-414fe8895e45' date '29 May 2017' time '1:46:43.843 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.95' message 'Implemented short-circuit logical operators && and ||' id '98363f19-8265-9743-9052-5593136c53b3' date '29 May 2017' time '11:14:39.98 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.94' message 'Improved importing failed error messages.' id '86036707-4a9c-d04c-8cfc-2848444e737b' date '29 May 2017' time '10:34:41.782 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.93' message 'Changed UziDebugger>>#sourceCode to take the code from the current instruction.Before it used the program''s source code but with the imported libraries this is no longer enough. Now, by looking at the current instruction we can get the actual source code even if we''re calling an imported library.' id '4635bfaa-44f1-de4d-835f-afc3c921e153' date '28 May 2017' time '10:58:03.946 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.92' message 'Implemented library imports.The UziParser will now recursively parse all the imported files.' id '262bc8b7-4e72-f746-bdc0-3b7cabcd3889' date '27 May 2017' time '11:11:48.975 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.91' message 'Starting to implement library imports.For now, I only modified the parser to include the new syntax.' id 'ee9630bf-c2b2-3146-8516-1a6f43d32a69' date '26 May 2017' time '10:00:35.039 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.90' message 'Improved error message a little.' id '5328561a-78c1-fe4e-b271-4e3e32579762' date '23 May 2017' time '11:06:27.652 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.89' message 'Changed UziProtocol>>#processError to show a more descriptive error on the Transcript' id '99b9ea7a-473f-f148-9c51-70ec1baab7ce' date '23 May 2017' time '10:50:38.888 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.88' message 'Added a couple of accessors to UziStackFrame and refactored UziDebugger a little.' id 'c0bc35ce-1b69-664a-8d6d-6de6566446b7' date '21 May 2017' time '3:34:54.709 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.87' message 'Added UziStackFrame class and UziDebugger>>#stackFrames.I moved both UziDebugger and UziStackFrame to their own class category ''Uzi-Core-Debugging''.Also, I fixed a bug when writing/reading floats from the serial. I was under the impression that Float>>#asIEEE32BitWord and Float>>#fromIEEE32Bit: were symmetrical but somehow this wasn''t the case. I don''t know, maybe I messed up. Anyway, the bug was that some elements on the stack (the return address and frame pointer) were not correct so I was not able to correctly interpret the stack to build all the stack frames. Now I started using FloatArray to perform the conversions and everything works.' id 'c764ef1b-18fa-e049-9b76-cf5b931ff839' date '21 May 2017' time '2:58:10.87 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.86' message 'Changed UziProtocol>>#processCoroutineState to also process the frame pointer.I changed UziDebugger to accept the frame pointer and I used that to interpret the stack and get the current value of all the local variables (UziDebugger>>#locals).I also fixed a small bug in UziProgramPrinter>>#visitWriteLocalInstruction:' id '35f0b89a-9874-8e49-bda9-5dd56560b2a4' date '20 May 2017' time '8:33:31.214 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.85' message 'Fixed bug when opening the debugger while the protocol is not connected.' id 'aad29d99-ad4c-164a-af99-13df9495a128' date '20 May 2017' time '7:50:38.866 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.84' message 'Changed UziProgramPrinter to remember which string it printed for each instruction.Also, a small fix in the UziInstruction>>#hash method. And added #currentProgram method to UziProtocol and UziDebugger.' id '4c061cce-445a-2743-9437-da9d3d4ad0da' date '20 May 2017' time '6:52:09.836 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.83' message 'Fixed a couple of bugs introduced in the previous commits.' id '3e3009d9-2b87-aa49-8bd6-5a0f3eac36e6' date '20 May 2017' time '3:55:38.186 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.82' message 'Implemented UziProgramPrinter.This class allows me produce a textual representation of a compiled program. I decided the textual representation should be exactly the same as the code you would write in Smalltalk to build the program.' id '63e3423f-e33b-7547-8d0c-555228b7937d' date '20 May 2017' time '3:03:07.89 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.81' message 'Small refactoring in the builders code.I renamed UziProgramBuilder>>#registerVariable: to #registerGlobal: (since we now have variables with different scope). I added UziScriptBuilder>>#registerArgument: and UziScriptBuilder>>#registerLocal:, so now defining these variables is not required to create a script builder.' id 'e0ba7f76-e93f-ed4d-b485-f3e43f1cbe9c' date '13 May 2017' time '6:20:46.085 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.80' message 'Implemented support for local variables.The syntax is similar to smalltalk in that it uses the pipe character $| to enclose the declarations but it allows to specify the default values for each variable.The compiler for now simply treats them exactly like arguments so the generated code is not really optimal.Also, now the global variables must be declared or the compilation fails.' id '29639b48-7578-3848-a08a-8af60ba8dc0a' date '11 May 2017' time '7:22:35.672 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.79' message 'Changed UziTypeChecker to force the user to define all variables.' id '21a6acab-0b43-d64a-9d05-c98b9d2e504f' date '8 May 2017' time '6:15:13.908 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.78' message 'Changed variable definition syntax to use 0 as default value' id '33b32fa9-0413-f741-9f7e-fe248c71ec11' date '8 May 2017' time '5:51:06.058 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.77' message 'Changed variable definition syntax' id 'e4ff2e4f-7527-394d-9b98-287f46908abe' date '8 May 2017' time '5:44:14.733 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.76' message 'Removed unnecessary comment' id '344c975d-8484-e747-bf7c-8cb66470a513' date '8 May 2017' time '1:03:48.602 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.75' message 'Changed UziProtocol to process the new RS_TICKING_SCRIPTS message.' id 'a14880e6-a2fb-0140-b0de-641a4283142d' date '8 May 2017' time '1:00:47.446 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.74' message 'Fixed bug when parsing script calls.' id '417ae8cf-25aa-684f-ab12-d49eb353aaef' date '8 May 2017' time '11:23:11.689 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.73' message 'Added support in the parser for floating point non-numbers' id '771b636c-cd01-3e45-880d-3189cfa9a29b' date '8 May 2017' time '11:06:54.603 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.72' message 'empty log message' id '54e95cbf-c3c7-a648-b150-0f2600ca360f' date '7 May 2017' time '10:14:54.489 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.71' message 'Fixed compilation of assignment to local variables.' id 'c8f9b720-d252-ce40-a1e8-b4792608fe68' date '7 May 2017' time '7:13:55.233 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.70' message 'Added a validation that only allows script blocks to accept arguments.' id '4cb12b6e-3a5b-a444-ab62-c9ea96f2b3f0' date '7 May 2017' time '12:58:01.406 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.69' message 'Fixed compilation of script calls with explicit argument names.' id '469fe22a-b1dd-b445-8731-298d0c10ea88' date '7 May 2017' time '12:53:44.598 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.68' message 'Fixed bug when calling a script inside a loop condition but not in its last statement. In that specific case the pop instruction would not be automatically added and we would get a stack overflow.Now I changed how the UziLoopNode works and the code is simpler.' id '0889e462-62fc-1e47-b541-e0f667a37a15' date '6 May 2017' time '8:11:08.075 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.67' message 'Several changes to support script calls.- Changed UziCompiler to automatically support script calls either as expressions or statements.- Added a bunch of tests.- Removed the #run special message. Replaced by #value, which now works the same if we call it in the context of a statement.- Removed the "acceptReturnValue" inst var from UziScriptCallNode because now a script call works as expression or statement depending on the context.' id '7ae0627e-8eb5-e34b-bc5a-371ec887d3f3' date '2 May 2017' time '7:02:46.93 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.66' message 'Changed UziCompiler to allow reading script arguments.' id '0c0aab76-3ad7-914d-8cd6-3487c17cbbf2' date '1 May 2017' time '1:19:19.357 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.65' message 'Changed UziParser syntax to support block arguments.' id '49fdd323-85ce-8e4a-b656-e24dff030f86' date '8 April 2017' time '12:15:47.146 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.64' message 'Several changes. Details below.- Changed UziScript to have an array of locals.- Changed UziEncoder to use part of each script''s header to encode the number of locals.- Added UziReadLocalInstruction.- Changed UziScriptBuilder to allow specifying script arguments.- Fixed UziScriptBuilder>>#writeLocal:- Implemented UziScriptBuilder>>#readLocal:' id '633b7785-0aed-1342-9202-9c9801691b84' date '7 April 2017' time '11:35:44.313 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.63' message 'Implemented return statement. And fixed a couple of minor parser issues.' id '4f6a0172-9ccb-0f46-8e27-4236193398a6' date '6 April 2017' time '7:31:34.771 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.62' message 'Implemented UziScriptCallNode.' id '4866ba65-1786-9f4f-8ee5-e41fd230f6fa' date '5 April 2017' time '9:38:33.022 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.61' message 'Implemented UziWriteLocalInstruction.And removed UziDupInstruction.' id 'e4be2ff4-d0cc-0446-8761-adf50a6b281b' date '4 April 2017' time '7:15:25.557 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.60' message 'Changed UziPrimitive>>#primSpec to express the prim codes in hexa.' id '57a947df-ff1e-8341-926a-bac272aa2d29' date '4 April 2017' time '5:00:20.594 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.59' message 'Added primitive "pop"' id 'dc1b609e-c0aa-7d40-8225-d6ed82129e0b' date '3 April 2017' time '2:48:31.342 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.58' message 'Removed unused classes and fixed test.' id '740a9bf6-180c-be46-baa4-d707ee1ebec6' date '30 March 2017' time '11:32:15.677 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.57' message 'Implemented "scriptCall" instruction and "ret" primitive.' id '0bb79d87-e4c5-184e-8b7d-c7404f0f8f9e' date '30 March 2017' time '5:30:59.846 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.56' message 'Switched opcodes between UziDupInstruction and UziJmpInstruction.' id 'ef2dc371-45e1-6d4a-a24e-f5029e06ac50' date '30 March 2017' time '4:43:12.997 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.55' message 'Added a couple of validations for the new parse nodes.' id '1ace3a08-e498-2441-bc98-71a12b15f1c5' date '26 March 2017' time '9:43:25.027 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.54' message 'Implemented start/stop script syntax.' id 'dbc4e50a-dc24-b04e-aec8-cb1ccef336d4' date '26 March 2017' time '9:21:53.18 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.53' message 'Added special variable "millis"' id '17f80da9-2855-4943-ba0e-84a739caf896' date '26 March 2017' time '5:13:24.121 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.52' message 'Renamed special variable "time" to "seconds"' id 'a5dda9ea-16d1-154c-89d3-78384163f086' date '26 March 2017' time '5:01:57.969 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.51' message 'Uncommented some test code' id '98353ea5-07f3-614d-bc99-2531f13c6944' date '26 March 2017' time '11:55:10.883 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.50' message 'Fixed bug in UziParser that was leaving chained message sends without their token.' id '1ca8a45e-8541-9340-9288-c5abaa901a12' date '26 March 2017' time '11:39:29.359 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.49' message 'Fixed message send check.It was not checking that the receiver has to be an expression.' id '96b0647f-82c9-834c-b961-79fe95e36357' date '25 March 2017' time '10:54:29.902 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.48' message 'Added "until" loops.' id 'b9eaf334-33cd-8a4d-afde-0b4936bbde76' date '25 March 2017' time '9:55:03.877 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.47' message 'Small refactor.' id '11a9a2ed-26c0-884c-a885-d671e0d31577' date '25 March 2017' time '1:06:53.168 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.46' message 'Improved UziTypeError printing.Now it shows a little the source code where the error is detected.' id '9e204e21-0f6b-ab4b-8ae9-39bb1cf7a5d3' date '25 March 2017' time '12:03:38.381 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.45' message 'Implemented UziTypeChecker>>#visitLoopNode:' id '40c3352c-03b0-9442-8ece-09802c70cb6b' date '25 March 2017' time '11:47:55.915 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.44' message 'Implemented #doWhileTrue: and #doWhileFalse:Also, added a couple of tests. And improved compilation of loops (although the code is kind of a mess right now).' id 'a3d8407a-95db-3644-9eca-ab995dd19c1d' date '25 March 2017' time '12:20:35.005 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.43' message 'Implemented #whileTrue and #whileFalse (loop without body).' id '4db9d177-f513-374b-a464-e1ece293143b' date '24 March 2017' time '8:35:29.747 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.42' message 'Implemented #whileFalse:' id '2b3b4c86-b20d-3e4d-8656-a92fe470a6a2' date '24 March 2017' time '8:15:15.596 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.41' message 'Starting to implement loops (only #whileTrue: for now)' id '4fc31927-7e50-f64e-8a17-34ab27564f84' date '24 March 2017' time '7:48:11.991 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.40' message 'Updated UziPrimitive>>#primSpec accordingly.' id 'a08c85c9-284f-114a-a395-981da4e92fd5' date '24 March 2017' time '6:32:36.48 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.39' message 'Added special variable syntax.For now, only the #time special variable is implemented.I added a new primitive just for that.' id '5de62c92-ed6f-5749-8d53-72ac12129e7f' date '24 March 2017' time '6:08:47.903 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.38' message 'Fixed smalltalk tests.They were broken due to the syntax changes.' id '1d2a1f72-0440-fe40-b7f0-675657c4b371' date '24 March 2017' time '5:10:59.641 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.37' message 'Changed encoding of the arguments of branch instructions.Now it uses two''s complement, making it possible to jump backwards.' id 'f533b5d1-859a-c74d-807f-e17db4fa5480' date '24 March 2017' time '12:46:12.007 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.36' message 'Several changes.- Moved the "yield" and "yieldTime" up in the #primSpec.- Removed UziYieldInstruction.- Added UziDupInstruction.- Changed syntax to use ''@'' as prefix for script names.' id '28f43c5d-b158-e940-bc80-8b61aaacb239' date '24 March 2017' time '11:52:34.697 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.35' message 'Removed now unnecessary call to the Transcript.' id '177ece1e-4e58-bd4a-b83c-09f4d185c07a' date '24 March 2017' time '10:53:53.428 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.34' message '* Changed UziParser to filter out trailing blanks in the message send tokens. For this I added an extension PPToken>>#withoutTrailingBlanks.* Also added UziDebugger>>#isRunning' id 'aa4ed744-598f-e440-9c80-da2faeb8c903' date '13 January 2017' time '9:45:56.416 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.33' message '* Added UziDebugger class, which is responsible for keeping the state of a single coroutine and provides utility methods to control the step-by-step execution.* Changed UziProtocol to support the UziDebugger class.' id 'c163a3fc-0397-794a-9501-8b28cb52c672' date '9 January 2017' time '12:27:50.184 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.32' message '* Fixed compiler bug. Added tests.* Added a few accessing methods.' id '9432ec57-0e5b-884c-921b-153999c24df1' date '4 January 2017' time '2:08:38.398 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.31' message '* Changed UziProgram and UziScript to also have a reference to their corresponding node.* Removed UziScriptBuilder>>#withCurrentNode:do: because it seems to me that it''s the Compiler''s responsibility to know how to associate each instruction with its node.* Added a test that verifies the compiler preserves the parse nodes.' id 'e8b155f2-dc98-464c-bff9-9e93ec8f02b3' date '31 December 2016' time '8:28:38.401 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.30' message '* Fixed annoying parser bug with trailing spaces.' id '5124149f-4129-664b-9854-f881fbb90599' date '31 December 2016' time '2:42:51.268 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.29' message '* Added tests and fixed bug in UziTypeChecker.' id '85d54f9b-8158-2048-a749-41b8e5423f71' date '31 December 2016' time '2:11:13.265 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.28' message '* A couple of refactorings on UziTypeChecker.' id '187a780f-cd54-0748-8034-f93ebebd1643' date '31 December 2016' time '1:37:37.523 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.27' message '* Added UziTypeChecker. This class will check the correctness of the program.' id 'f5a56d04-1fb0-ad46-b2ab-07156467cf4f' date '31 December 2016' time '12:47:34.299 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.26' message 'Added support for the RS_COROUTINE_STATE message.For now, it simply dumps the vm state to the Transcript.' id 'a2591148-e267-254b-84d8-51581ffc4a65' date '28 December 2016' time '6:06:26.58 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.25' message '* Added UziProtocol>>setBreakCount:value:' id '5b293902-aaca-0145-8caa-635a1f6db01c' date '28 December 2016' time '4:18:20.523 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.24' message '* Changed UziInstruction to have a reference to the AST node which generated it.' id 'abe89ba8-9ec2-4547-9342-4d87fffff6b4' date '28 December 2016' time '1:19:38.164 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.23' message '* Changed the parser so that the nodes remember their token.' id 'a268b613-6814-eb4c-a098-2ad914889d75' date '27 December 2016' time '11:13:04.727 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.22' message 'Variable names stored as symbols (instead of strings)' id 'f7f72286-df6b-fe4f-bd26-e3c92bac90b1' date '22 December 2016' time '6:45:34.619 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.21' message '* Improved "printing" of compiled programs.It makes it easier to see them in inspectors and stuff.' id '3d917f23-86e0-e349-9fbc-a7a9e3956265' date '22 December 2016' time '6:38:41.122 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.20' message 'Simplified UziParser.As a result, I managed to remove UziGrammar, UziToken, and UziTokenParser.' id '2c3b0a46-9d64-ab40-81ef-4e23a0112bfe' date '22 December 2016' time '5:00:13.04 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.18' message '* Changed UziProtocol to understand the RS_TRACE message.' id 'c3f283a0-6c09-fe42-83cc-7e2e339278a0' date '21 December 2016' time '5:39:32 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.17' message '* Removed old reference to UziSimulator.' id 'ec6c3847-c4e9-a545-8539-443bfca00137' date '16 December 2016' time '9:00:13 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.16' message '* Added selector #msDelay, which maps to primitive #yieldTime' id 'f0f92dcd-ee23-f94f-8913-e00e596b183e' date '7 December 2016' time '12:06:48 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.15' message '* Added primitive #yieldTime to the list of primitives.' id '34026268-8205-6e45-9cc5-1ab4962d31e5' date '6 December 2016' time '11:55:38 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.14' message '* Added yield instruction.' id 'e8e9c550-b830-aa41-8e1b-e9bb9bc6f12e' date '6 December 2016' time '10:59:03 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.13' message '* Added UziProtocol>>#installCurrentProgram' id 'cd65c066-84fa-0446-91a1-4e3ae8755d25' date '6 December 2016' time '10:49:51 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.12' message '* Some fixes done on the CIITI 2016 Bs. As.' id '4da11776-7502-434b-a7fe-d7b0cd13d577' date '1 November 2016' time '4:45:06 pm' author 'Richo' ancestors ((name 'Uzi-Core-Richo.11' message '* Changed the parser to allow variable definitions at the beginning of the program.' id '1522b0c8-ce60-4543-b567-cb7819c0c0ed' date '10 October 2016' time '4:25:43 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.10' message '* Fixed UziCompilerTest>>testBlinkLed9Script.* Removed from #expectedFailures.' id 'be88f94c-b694-c34b-a65a-18fc97a4796b' date '10 October 2016' time '1:47:04 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.9' message '* Changed UziGrammer to only allow #ticking as the tickingState.* Fixed tests.' id '0c819e01-24c1-594c-85af-828d915417f6' date '10 October 2016' time '11:51:45 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.8' message '* Removed unnecessary test class.' id '4b8a5775-1419-be4e-91d6-35603a9b64e8' date '10 October 2016' time '11:47:38 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.7' message '* Fixed test.' id 'f127263f-d021-5c4d-9067-e91d630e2433' date '10 October 2016' time '11:46:04 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.6' message '* Changed UziGrammar to make the ticking state optional.* Changed UziCompiler to set the ticking flag if the ticking rate is defined.* Added a test that I didn''t get a chance to run yet because the Etoys image does not seem to have a Test Runner.' id 'b779724c-5e5d-3647-a27e-f3779b7380d4' date '10 October 2016' time '11:43:33 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.5' message '* Removed EEPROM classes from Uzi-Core.' id 'b0f447e7-9b8e-e44b-9579-de649c0b16c4' date '10 October 2016' time '11:31:15 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.4' message '* Forgot to add the prefix to the EEPROM test classes.' id '7fc214cd-e5f9-4749-aca8-bf724c536a61' date '10 October 2016' time '11:28:40 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.3' message '* Added ''Uzi'' prefix to all the EEPROM classes.' id '0c85d662-1045-7249-bf54-1800f92c26b9' date '10 October 2016' time '11:27:13 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.2' message '* Removed Uzi-Simulator category.' id 'e618e359-47cd-fb4c-aa5b-7b8f13ea1f04' date '10 October 2016' time '11:16:35 am' author 'Richo' ancestors ((name 'Uzi-Core-Richo.1' message '* Copied all classes that don''t belong to the Uzi-Etoys package.' id '7a116038-0033-ba44-b520-79443574d92c' date '10 October 2016' time '11:14:46 am' author 'Richo' ancestors () stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())