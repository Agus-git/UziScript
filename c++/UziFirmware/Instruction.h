#pragma once

#include "Reader.h"

enum Opcode
{
	// -2
	PRIM_WRITE_PIN = 0b00000000,
	PRIM_SERVO_DEGREES,
	PRIM_SERVO_WRITE,
	PRIM_CONSTRAIN,

	JNE,
	JLT,
	JLTE,
	JGT,
	JGTE,
	
	// -1
	PRIM_TOGGLE_PIN = 0b01000000,
	PRIM_MULTIPLY,
	PRIM_ADD,
	PRIM_DIVIDE,
	PRIM_SUBTRACT,
	PRIM_EQ,
	PRIM_NEQ,
	PRIM_GT,
	PRIM_GTEQ,
	PRIM_LT,
	PRIM_LTEQ,
	PRIM_TURN_ON,
	PRIM_TURN_OFF,
	PRIM_DELAY_MILLIS,
	PRIM_DELAY_SECONDS,
	PRIM_DELAY_MINUTES,
	PRIM_POP,
	PRIM_RETV,
	PRIM_BITWISE_AND,
	PRIM_BITWISE_OR,
	PRIM_LOGICAL_AND,
	PRIM_LOGICAL_OR,
	PRIM_SERIAL_WRITE,
	PRIM_POWER,
	PRIM_MOD,
	PRIM_RANDOM_INT,
	PRIM_IS_DIVISIBLE_BY,
	PRIM_IS_CLOSE_TO,

	WRITE_PIN,
	WRITE_GLOBAL,
	WRITE_LOCAL,
	JZ,
	JNZ,

	// 0
	PRIM_READ_PIN = 0b10000000,
	PRIM_NEGATE,
	PRIM_SIN,
	PRIM_COS,
	PRIM_TAN,
	PRIM_YIELD,
	PRIM_RET,
	PRIM_ROUND,
	PRIM_CEIL,
	PRIM_FLOOR,
	PRIM_SQRT,
	PRIM_ABS,
	PRIM_LN,
	PRIM_LOG10,
	PRIM_EXP,
	PRIM_POW10,
	PRIM_ASIN,
	PRIM_ACOS,
	PRIM_ATAN,
	PRIM_IS_ON,
	PRIM_IS_OFF,
	PRIM_IS_EVEN,
	PRIM_IS_ODD,
	PRIM_IS_PRIME,
	PRIM_IS_WHOLE,
	PRIM_IS_POSITIVE,
	PRIM_IS_NEGATIVE,

	TURN_ON,
	TURN_OFF,
	SCRIPT_START,
	SCRIPT_STOP,
	SCRIPT_PAUSE,
	SCRIPT_RESUME,
	JMP,

	// TBD (Por ahora 0)
	SCRIPT_CALL,

	// 1
	PRIM_RANDOM = 0b11000000,
	PRIM_SECONDS,
	PRIM_MILLIS,
	PRIM_MINUTES,
	PRIM_COROUTINE,
	
	READ_PIN,
	READ_GLOBAL,
	READ_LOCAL,
};

struct Instruction
{	
	uint8 opcode; // INFO(Richo): Originally an Opcode, but changed to uint8 to save 1 byte.
	int8 argument;
};

void readInstruction(Reader* rs, Instruction* instruction, bool& timeout);