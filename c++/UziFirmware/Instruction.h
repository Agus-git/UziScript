#pragma once

#include "Reader.h"

enum Opcode
{
	TURN_ON, TURN_OFF, WRITE_PIN, READ_PIN,
	READ_GLOBAL, WRITE_GLOBAL, 
	SCRIPT_CALL, 
	SCRIPT_START, SCRIPT_STOP, 
	SCRIPT_PAUSE, SCRIPT_RESUME,
	JMP, JZ, JNZ, JNE, JLT, JLTE, JGT, JGTE,
	READ_LOCAL, WRITE_LOCAL,

	PRIM_READ_PIN, PRIM_WRITE_PIN, PRIM_TOGGLE_PIN,
	PRIM_SERVO_DEGREES, PRIM_SERVO_WRITE,
	PRIM_MULTIPLY, PRIM_ADD, PRIM_DIVIDE, PRIM_SUBTRACT,
	PRIM_SECONDS, PRIM_MILLIS,
	PRIM_EQ, PRIM_NEQ, PRIM_GT, PRIM_GTEQ, PRIM_LT, PRIM_LTEQ,
	PRIM_NEGATE,
	PRIM_SIN, PRIM_COS, PRIM_TAN,
	PRIM_TURN_ON, PRIM_TURN_OFF,
	PRIM_YIELD, PRIM_YIELD_TIME,
	PRIM_RET, PRIM_POP, PRIM_RETV,
	PRIM_COROUTINE,
	PRIM_LOGICAL_AND, PRIM_LOGICAL_OR,
	PRIM_BITWISE_AND, PRIM_BITWISE_OR,
	PRIM_SERIAL_WRITE,
	PRIM_ROUND, PRIM_CEIL, PRIM_FLOOR,
	PRIM_SQRT, PRIM_ABS,
	PRIM_LN, PRIM_LOG10, PRIM_EXP, PRIM_POW10,
	PRIM_ASIN, PRIM_ACOS, PRIM_ATAN,
	PRIM_POWER,
	PRIM_IS_ON, PRIM_IS_OFF,
	PRIM_MOD, PRIM_CONSTRAIN,
	PRIM_RANDOM_INT, PRIM_RANDOM,
	PRIM_IS_EVEN, PRIM_IS_ODD,
	PRIM_IS_PRIME, PRIM_IS_WHOLE,
	PRIM_IS_POSITIVE, PRIM_IS_NEGATIVE,
	PRIM_IS_DIVISIBLE_BY
};

struct Instruction
{	
	uint8 opcode; // INFO(Richo): Originally an Opcode, but changed to uint8 to save 1 byte.
	int8 argument;
};

void readInstruction(Reader* rs, Instruction* instruction, bool& timeout);