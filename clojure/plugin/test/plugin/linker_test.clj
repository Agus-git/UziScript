(ns plugin.linker-test
  (:require [clojure.test :refer :all]
            [plugin.compiler.linker :as l])
  (:use [plugin.test-utils]))

(defn link [ast]
  (l/resolve-imports ast "../../uzi/libraries"))

(deftest importing-library-prepends-imported-tree-with-alias-applied
  ; import test from 'test_1.uzi';
  ; task main() { write(D13, test.foo()); }
  (let [ast {:__class__ "UziProgramNode",
             :globals [],
             :imports [{:__class__ "UziImportNode",
                        :alias "test",
                        :initializationBlock nil,
                        :isResolved false,
                        :path "test_1.uzi"}],
             :primitives [],
             :scripts [{:__class__ "UziTaskNode",
                        :arguments [],
                        :body {:__class__ "UziBlockNode",
                               :statements [{:__class__ "UziCallNode",
                                             :arguments [{:__class__ "Association",
                                                          :key nil,
                                                          :value {:__class__ "UziPinLiteralNode",
                                                                  :number 13,
                                                                  :type "D"}},
                                                         {:__class__ "Association",
                                                          :key nil,
                                                          :value {:__class__ "UziCallNode",
                                                                  :arguments [],
                                                                  :selector "test.foo"}}],
                                             :selector "write"}]},
                        :name "main",
                        :state "once",
                        :tickingRate nil}]}
        expected {:__class__ "UziProgramNode",
                  :globals [],
                  :imports [{:__class__ "UziImportNode",
                             :alias "test",
                             :isResolved true,
                             :path "test_1.uzi"}],
                  :primitives [],
                  :scripts [{:__class__ "UziFunctionNode",
                             :arguments [],
                             :body {:__class__ "UziBlockNode",
                                    :statements [{:__class__ "UziReturnNode",
                                                  :value {:__class__ "UziNumberLiteralNode",
                                                          :value 42}}]},
                             :name "test.foo"},
                            {:__class__ "UziTaskNode",
                             :arguments [],
                             :body {:__class__ "UziBlockNode",
                                    :statements [{:__class__ "UziCallNode",
                                                  :arguments [{:__class__ "Association",
                                                               :key nil,
                                                               :value {:__class__ "UziPinLiteralNode",
                                                                       :number 13,
                                                                       :type "D"}},
                                                              {:__class__ "Association",
                                                               :key nil,
                                                               :value {:__class__ "UziCallNode",
                                                                       :arguments [],
                                                                       :selector "test.foo"}}],
                                                  :selector "write"}]},
                             :name "main",
                             :state "once",
                             :tickingRate nil}]}
        actual (link ast)]
    (is (equivalent? expected actual))))


(deftest importing-the-same-library-twice-doesnt-collide
  ; import test1 from 'test_1.uzi';
  ; import test2 from 'test_1.uzi';
  ; task main() { write(test2.foo(), test1.foo()); }
  (let [ast {:__class__ "UziProgramNode",
             :globals [],
             :imports [{:__class__ "UziImportNode",
                        :alias "test1",
                        :initializationBlock nil,
                        :isResolved false,
                        :path "test_1.uzi"},
                       {:__class__ "UziImportNode",
                        :alias "test2",
                        :initializationBlock nil,
                        :isResolved false,
                        :path "test_1.uzi"}],
             :primitives [],
             :scripts [{:__class__ "UziTaskNode",
                        :arguments [],
                        :body {:__class__ "UziBlockNode",
                               :statements [{:__class__ "UziCallNode",
                                             :arguments [{:__class__ "Association",
                                                          :key nil,
                                                          :value {:__class__ "UziCallNode",
                                                                  :arguments [],
                                                                  :selector "test2.foo"}},
                                                         {:__class__ "Association",
                                                          :key nil,
                                                          :value {:__class__ "UziCallNode",
                                                                  :arguments [],
                                                                  :selector "test1.foo"}}],
                                             :selector "write"}]},
                        :name "main",
                        :state "once",
                        :tickingRate nil}]}
        expected {:__class__ "UziProgramNode",
                  :globals [],
                  :imports [{:__class__ "UziImportNode",
                             :alias "test1",
                             :isResolved true,
                             :path "test_1.uzi"},
                            {:__class__ "UziImportNode",
                             :alias "test2",
                             :isResolved true,
                             :path "test_1.uzi"}],
                  :primitives [],
                  :scripts [{:__class__ "UziFunctionNode",
                             :arguments [],
                             :body {:__class__ "UziBlockNode",
                                    :statements [{:__class__ "UziReturnNode",
                                                  :value {:__class__ "UziNumberLiteralNode",
                                                          :value 42}}]},
                             :name "test1.foo"},
                            {:__class__ "UziFunctionNode",
                             :arguments [],
                             :body {:__class__ "UziBlockNode",
                                    :statements [{:__class__ "UziReturnNode",
                                                  :value {:__class__ "UziNumberLiteralNode",
                                                          :value 42}}]},
                             :name "test2.foo"},
                            {:__class__ "UziTaskNode",
                             :arguments [],
                             :body {:__class__ "UziBlockNode",
                                    :statements [{:__class__ "UziCallNode",
                                                  :arguments [{:__class__ "Association",
                                                               :key nil,
                                                               :value {:__class__ "UziCallNode",
                                                                       :arguments [],
                                                                       :selector "test2.foo"}},
                                                              {:__class__ "Association",
                                                               :key nil,
                                                               :value {:__class__ "UziCallNode",
                                                                       :arguments [],
                                                                       :selector "test1.foo"}}],
                                                  :selector "write"}]},
                             :name "main",
                             :state "once",
                             :tickingRate nil}]}
        actual (link ast)]
    (is (equivalent? expected actual))))

(deftest importing-nested-libraries
  ; import t2 from 'test_3.uzi';
  ; task main() { write(D13, t2.bar(1)); }
  (let [ast {:__class__ "UziProgramNode",
             :globals [],
             :imports [{:__class__ "UziImportNode",
                        :alias "t2",
                        :initializationBlock nil,
                        :isResolved false,
                        :path "test_3.uzi"}],
             :primitives [],
             :scripts [{:__class__ "UziTaskNode",
                        :arguments [],
                        :body {:__class__ "UziBlockNode",
                               :statements [{:__class__ "UziCallNode",
                                             :arguments [{:__class__ "Association",
                                                          :key nil,
                                                          :value {:__class__ "UziPinLiteralNode",
                                                                  :number 13,
                                                                  :type "D"}},
                                                         {:__class__ "Association",
                                                          :key nil,
                                                          :value {:__class__ "UziCallNode",
                                                                  :arguments [{:__class__ "Association",
                                                                               :key nil,
                                                                               :value {:__class__ "UziNumberLiteralNode",
                                                                                       :value 1}}],
                                                                  :selector "t2.bar"}}],
                                             :selector "write"}]},
                        :name "main",
                        :state "once",
                        :tickingRate nil}]}
        expected {:__class__ "UziProgramNode",
                  :globals [{:__class__ "UziVariableDeclarationNode",
                             :name "t2.t1.v",
                             :value {:__class__ "UziNumberLiteralNode",
                                     :value 42}}],
                  :imports [{:__class__ "UziImportNode",
                             :alias "t2",
                             :isResolved true,
                             :path "test_3.uzi"}],
                  :primitives [],
                  :scripts [{:__class__ "UziFunctionNode",
                             :arguments [],
                             :body {:__class__ "UziBlockNode",
                                    :statements [{:__class__ "UziReturnNode",
                                                  :value {:__class__ "UziNumberLiteralNode",
                                                          :value 42}}]},
                             :name "t2.t1.foo"},
                            {:__class__ "UziFunctionNode",
                             :arguments [{:__class__ "UziVariableDeclarationNode",
                                          :name "a"}],
                             :body {:__class__ "UziBlockNode",
                                    :statements [{:__class__ "UziReturnNode",
                                                  :value {:__class__ "UziCallNode",
                                                          :arguments [{:__class__ "Association",
                                                                       :key nil,
                                                                       :value {:__class__ "UziCallNode",
                                                                               :arguments [{:__class__ "Association",
                                                                                            :key nil,
                                                                                            :value {:__class__ "UziVariableNode",
                                                                                                    :name "t2.t1.v"}},
                                                                                           {:__class__ "Association",
                                                                                            :key nil,
                                                                                            :value {:__class__ "UziVariableNode",
                                                                                                    :name "a"}}],
                                                                               :selector "t2.+"}},
                                                                      {:__class__ "Association",
                                                                       :key nil,
                                                                       :value {:__class__ "UziCallNode",
                                                                               :arguments [],
                                                                               :selector "t2.t1.foo"}}],
                                                          :selector "t2.+"}}]},
                             :name "t2.bar"},
                            {:__class__ "UziTaskNode",
                             :arguments [],
                             :body {:__class__ "UziBlockNode",
                                    :statements [{:__class__ "UziCallNode",
                                                  :arguments [{:__class__ "Association",
                                                               :key nil,
                                                               :value {:__class__ "UziPinLiteralNode",
                                                                       :number 13,
                                                                       :type "D"}},
                                                              {:__class__ "Association",
                                                               :key nil,
                                                               :value {:__class__ "UziCallNode",
                                                                       :arguments [{:__class__ "Association",
                                                                                    :key nil,
                                                                                    :value {:__class__ "UziNumberLiteralNode",
                                                                                            :value 1}}],
                                                                       :selector "t2.bar"}}],
                                                  :selector "write"}]},
                             :name "main",
                             :state "once",
                             :tickingRate nil}]}
        actual (link ast)]
    (is (equivalent? expected actual))))

(deftest stopping-imported-task
  ; import t3 from 'test_4.uzi';
  ; task main() running { stop t3.blink13; }
  (let [ast {:__class__ "UziProgramNode",
             :globals [],
             :imports [{:__class__ "UziImportNode",
                        :alias "t3",
                        :initializationBlock nil,
                        :isResolved false,
                        :path "test_4.uzi"}],
             :primitives [],
             :scripts [{:__class__ "UziTaskNode",
                        :arguments [],
                        :body {:__class__ "UziBlockNode",
                               :statements [{:__class__ "UziScriptStopNode",
                                             :scripts ["t3.blink13"]}]},
                        :name "main",
                        :state "running",
                        :tickingRate nil}]}
        expected {:__class__ "UziProgramNode",
                  :globals [],
                  :imports [{:__class__ "UziImportNode",
                             :alias "t3",
                             :isResolved true,
                             :path "test_4.uzi"}],
                  :primitives [],
                  :scripts [{:__class__ "UziTaskNode",
                             :arguments [],
                             :body {:__class__ "UziBlockNode",
                                    :statements [{:__class__ "UziCallNode",
                                                  :arguments [{:__class__ "Association",
                                                               :key nil,
                                                               :value {:__class__ "UziPinLiteralNode",
                                                                       :number 13,
                                                                       :type "D"}}],
                                                  :selector "t3.toggle"}]},
                             :name "t3.blink13",
                             :state "running"},
                            {:__class__ "UziTaskNode",
                             :arguments [],
                             :body {:__class__ "UziBlockNode",
                                    :statements [{:__class__ "UziScriptStopNode",
                                                  :scripts ["t3.blink13"]}]},
                             :name "main",
                             :state "running",
                             :tickingRate nil}]}
        actual (link ast)]
    (is (equivalent? expected actual))))

(deftest starting-imported-task
  ; import t3 from 'test_4.uzi';
  ; task main() running { start t3.blink13; }
  (let [ast {:__class__ "UziProgramNode",
             :globals [],
             :imports [{:__class__ "UziImportNode",
                        :alias "t3",
                        :initializationBlock nil,
                        :isResolved false,
                        :path "test_4.uzi"}],
             :primitives [],
             :scripts [{:__class__ "UziTaskNode",
                        :arguments [],
                        :body {:__class__ "UziBlockNode",
                               :statements [{:__class__ "UziScriptStartNode",
                                             :scripts ["t3.blink13"]}]},
                        :name "main",
                        :state "running",
                        :tickingRate nil}]}
        expected {:__class__ "UziProgramNode",
                  :globals [],
                  :imports [{:__class__ "UziImportNode",
                             :alias "t3",
                             :isResolved true,
                             :path "test_4.uzi"}],
                  :primitives [],
                  :scripts [{:__class__ "UziTaskNode",
                             :arguments [],
                             :body {:__class__ "UziBlockNode",
                                    :statements [{:__class__ "UziCallNode",
                                                  :arguments [{:__class__ "Association",
                                                               :key nil,
                                                               :value {:__class__ "UziPinLiteralNode",
                                                                       :number 13,
                                                                       :type "D"}}],
                                                  :selector "t3.toggle"}]},
                             :name "t3.blink13",
                             :state "running"},
                            {:__class__ "UziTaskNode",
                             :arguments [],
                             :body {:__class__ "UziBlockNode",
                                    :statements [{:__class__ "UziScriptStartNode",
                                                  :scripts ["t3.blink13"]}]},
                             :name "main",
                             :state "running",
                             :tickingRate nil}]}
        actual (link ast)]
    (is (equivalent? expected actual))))

(deftest importing-script-that-stops-a-task
  ; import t from 'test_5.uzi';
  ; task main() running { t.stopTask(); }
  (let [ast {:__class__ "UziProgramNode",
             :globals [],
             :imports [{:__class__ "UziImportNode",
                        :alias "t",
                        :initializationBlock nil,
                        :isResolved false,
                        :path "test_5.uzi"}],
             :primitives [],
             :scripts [{:__class__ "UziTaskNode",
                        :arguments [],
                        :body {:__class__ "UziBlockNode",
                               :statements [{:__class__ "UziCallNode",
                                             :arguments [],
                                             :selector "t.stopTask"}]},
                        :name "main",
                        :state "running",
                        :tickingRate nil}]}
        expected {:__class__ "UziProgramNode",
                  :globals [],
                  :imports [{:__class__ "UziImportNode",
                             :alias "t",
                             :initializationBlock nil,
                             :isResolved true,
                             :path "test_5.uzi"}],
                  :primitives [],
                  :scripts [{:__class__ "UziProcedureNode",
                             :arguments [],
                             :body {:__class__ "UziBlockNode",
                                    :statements [{:__class__ "UziScriptStopNode",
                                                  :scripts ["t.blink"]}]},
                             :name "t.stopTask"},
                            {:__class__ "UziTaskNode",
                             :arguments [],
                             :body {:__class__ "UziBlockNode",
                                    :statements [{:__class__ "UziCallNode",
                                                  :arguments [{:__class__ "Association",
                                                               :key nil,
                                                               :value {:__class__ "UziPinLiteralNode",
                                                                       :number 13,
                                                                       :type "D"}}],
                                                  :selector "t.toggle"}]},
                             :name "t.blink",
                             :state "running"},
                            {:__class__ "UziTaskNode",
                             :arguments [],
                             :body {:__class__ "UziBlockNode",
                                    :statements [{:__class__ "UziCallNode",
                                                  :arguments [],
                                                  :selector "t.stopTask"}]},
                             :name "main",
                             :state "running",
                             :tickingRate nil}]}
        actual (link ast)]
    (is (equivalent? expected actual))))

(deftest importing-script-that-starts-a-task
  ; import t from 'test_6.uzi';
  ; task main() running { t.startTask(); }
  (let [ast {:__class__ "UziProgramNode",
             :globals [],
             :imports [{:__class__ "UziImportNode",
                        :alias "t",
                        :initializationBlock nil,
                        :isResolved false,
                        :path "test_6.uzi"}],
             :primitives [],
             :scripts [{:__class__ "UziTaskNode",
                        :arguments [],
                        :body {:__class__ "UziBlockNode",
                               :statements [{:__class__ "UziCallNode",
                                             :arguments [],
                                             :selector "t.startTask"}]},
                        :name "main",
                        :state "running",
                        :tickingRate nil}]}
        expected {:__class__ "UziProgramNode",
                  :globals [],
                  :imports [{:__class__ "UziImportNode",
                             :alias "t",
                             :isResolved true,
                             :path "test_6.uzi"}],
                  :primitives [],
                  :scripts [{:__class__ "UziProcedureNode",
                             :arguments [],
                             :body {:__class__ "UziBlockNode",
                                    :statements [{:__class__ "UziScriptStartNode",
                                                  :scripts ["t.blink"]}]},
                             :name "t.startTask"},
                            {:__class__ "UziTaskNode",
                             :arguments [],
                             :body {:__class__ "UziBlockNode",
                                    :statements [{:__class__ "UziCallNode",
                                                  :arguments [{:__class__ "Association",
                                                               :key nil,
                                                               :value {:__class__ "UziPinLiteralNode",
                                                                       :number 13,
                                                                       :type "D"}}],
                                                  :selector "t.toggle"}]},
                             :name "t.blink",
                             :state "stopped"},
                            {:__class__ "UziTaskNode",
                             :arguments [],
                             :body {:__class__ "UziBlockNode",
                                    :statements [{:__class__ "UziCallNode",
                                                  :arguments [],
                                                  :selector "t.startTask"}]},
                             :name "main",
                             :state "running",
                             :tickingRate nil}]}
        actual (link ast)]
    (is (equivalent? expected actual))))

#_(
  ; TEMPLATE

  (deftest
    ; uzi src
    (let [ast
          expected
          actual (link ast)]
      (is (equivalent? expected actual))))

  )
